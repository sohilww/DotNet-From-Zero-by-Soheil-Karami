"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[1172],{6773:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Contents/Session1/Classes-constructors-properties-inheritance/Encapsulation","title":"Encapsulation","description":"Encapsulation means \\"hiding internal details\\" and only exposing what\u2019s necessary. It\u2019s a key part of writing clean, safe, and maintainable object-oriented code.","source":"@site/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/06-Encapsulation.md","sourceDirName":"Contents/Session1/04-Classes-constructors-properties-inheritance","slug":"/Contents/Session1/Classes-constructors-properties-inheritance/Encapsulation","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Encapsulation","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/06-Encapsulation.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Encapsulation","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Polymorphism","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Polymorphism"},"next":{"title":"Abstraction","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Abstraction"}}');var r=s(4848),t=s(8453);const l={title:"Encapsulation",sidebar_position:6},c="\ud83d\udd10 Encapsulation in C#",o={},a=[{value:"\ud83c\udf33 Real-Life Analogy: The Tree",id:"-real-life-analogy-the-tree",level:2},{value:"\ud83d\udeab Public Fields = Bad Practice",id:"-public-fields--bad-practice",level:2},{value:"\u2705 Encapsulation with <code>private</code> + <code>public</code>",id:"-encapsulation-with-private--public",level:2},{value:"\ud83e\udde0 Why Properties Are Better",id:"-why-properties-are-better",level:2},{value:"\ud83d\udd10 Access Modifiers in C#",id:"-access-modifiers-in-c",level:2},{value:"\ud83e\uddfc Clean Code Tips",id:"-clean-code-tips",level:2}];function d(e){const n={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-encapsulation-in-c",children:"\ud83d\udd10 Encapsulation in C#"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Encapsulation"}),' means "',(0,r.jsx)(n.strong,{children:"hiding internal details"}),'" and ',(0,r.jsx)(n.strong,{children:"only exposing what\u2019s necessary"}),". It\u2019s a key part of writing clean, safe, and maintainable object-oriented code."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-real-life-analogy-the-tree",children:"\ud83c\udf33 Real-Life Analogy: The Tree"}),"\n",(0,r.jsx)(n.p,{children:"Imagine a real tree:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83c\udf3f You can ",(0,r.jsx)(n.strong,{children:"see"})," the fruits and leaves \u2192 but you ",(0,r.jsx)(n.strong,{children:"can\u2019t touch the roots"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83c\udf31 The inner roots of the tree could be modeled as ",(0,r.jsx)(n.code,{children:"internal"})," or ",(0,r.jsx)(n.code,{children:"protected"}),", since they are ",(0,r.jsx)(n.strong,{children:"used by internal systems or subclasses"}),", but not by external consumers."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This is exactly how encapsulation works in programming:",(0,r.jsx)(n.br,{}),"\n","\u2192 Protect what's internal, expose only what's useful."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-public-fields--bad-practice",children:"\ud83d\udeab Public Fields = Bad Practice"}),"\n",(0,r.jsxs)(n.p,{children:["Let\u2019s say we define a ",(0,r.jsx)(n.code,{children:"Tree"})," class like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class Tree\r\n{\r\n    public int Height;\r\n    public string FruitType;\r\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now any code can ",(0,r.jsx)(n.strong,{children:"directly modify"})," its internal state:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Set ",(0,r.jsx)(n.code,{children:"Height"})," to a negative number"]}),"\n",(0,r.jsxs)(n.li,{children:["Change ",(0,r.jsx)(n.code,{children:"FruitType"})," randomly"]}),"\n",(0,r.jsx)(n.li,{children:"Break the rules of our domain"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,r.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"What problems might happen if you expose all your class data?"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"-encapsulation-with-private--public",children:["\u2705 Encapsulation with ",(0,r.jsx)(n.code,{children:"private"})," + ",(0,r.jsx)(n.code,{children:"public"})]}),"\n",(0,r.jsxs)(n.p,{children:["We can ",(0,r.jsx)(n.strong,{children:"restrict access"})," by making fields ",(0,r.jsx)(n.code,{children:"private"}),", and provide ",(0,r.jsx)(n.strong,{children:"controlled access"})," using properties or methods."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class Tree\r\n{\r\n    private int _height;\r\n    private string _fruitType;\r\n\r\n    public int Height\r\n    {\r\n        get => _height;\r\n        set\r\n        {\r\n            if (value > 0)\r\n                _height = value;\r\n            else\r\n                Console.WriteLine("Height must be positive.");\r\n        }\r\n    }\r\n\r\n    public string FruitType\r\n    {\r\n        get => _fruitType;\r\n        set => _fruitType = value;\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-why-properties-are-better",children:"\ud83e\udde0 Why Properties Are Better"}),"\n",(0,r.jsx)(n.p,{children:"Properties let us:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.strong,{children:"validation"})," when setting a value"]}),"\n",(0,r.jsxs)(n.li,{children:["Keep the field ",(0,r.jsx)(n.strong,{children:"hidden"})]}),"\n",(0,r.jsxs)(n.li,{children:["Use a ",(0,r.jsx)(n.strong,{children:"clean syntax"})," for consumers"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-access-modifiers-in-c",children:"\ud83d\udd10 Access Modifiers in C#"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Modifier"}),(0,r.jsx)(n.th,{children:"Who can access it?"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"public"})}),(0,r.jsx)(n.td,{children:"Anyone \u2014 from anywhere"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"private"})}),(0,r.jsx)(n.td,{children:"Only inside the same class"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"protected"})}),(0,r.jsx)(n.td,{children:"Inside the class and its subclasses"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"internal"})}),(0,r.jsx)(n.td,{children:"Same project (assembly) only"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"protected internal"})}),(0,r.jsx)(n.td,{children:"Subclasses or same project"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"private protected"})}),(0,r.jsx)(n.td,{children:"Same class or subclass in same project"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,r.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Which members of a class should usually be private?"}),"\n",(0,r.jsxs)(n.li,{children:["When would you use ",(0,r.jsx)(n.code,{children:"protected"})," instead of ",(0,r.jsx)(n.code,{children:"private"}),"?"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,r.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Make all fields in your ",(0,r.jsx)(n.code,{children:"Tree"})," class private"]}),"\n",(0,r.jsx)(n.li,{children:"Use properties or methods to control access"}),"\n",(0,r.jsx)(n.li,{children:"Add validation: e.g., Height must always be positive"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-clean-code-tips",children:"\ud83e\uddfc Clean Code Tips"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 Never expose fields directly (",(0,r.jsx)(n.code,{children:"public int age;"})," \u274c)"]}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Use properties with validation for critical data"}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Start with ",(0,r.jsx)(n.code,{children:"private"}),", then only open access if needed"]}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Keep class internals hidden unless you have a good reason"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\ud83d\udccc Remember:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Good encapsulation makes your class a ",(0,r.jsx)(n.strong,{children:"safe and reliable black box"}),".",(0,r.jsx)(n.br,{}),"\n","You can use it, but you ",(0,r.jsx)(n.strong,{children:"don\u2019t need to know how it works inside"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);