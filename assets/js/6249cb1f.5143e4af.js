"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[1648],{6590:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Contents/Session1/Functions-parameters-return-values/Exception-Handling","title":"Exception Handling","description":"An exception is an error that occurs at runtime and interrupts the normal flow of your program.","source":"@site/docs/Contents/Session1/03-Functions-parameters-return-values/02-Exception-Handling.md","sourceDirName":"Contents/Session1/03-Functions-parameters-return-values","slug":"/Contents/Session1/Functions-parameters-return-values/Exception-Handling","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Functions-parameters-return-values/Exception-Handling","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/03-Functions-parameters-return-values/02-Exception-Handling.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Exception Handling"},"sidebar":"tutorialSidebar","previous":{"title":"Functions, Parameters, and Return Values","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Functions-parameters-return-values/Functions-parameters-return-values"},"next":{"title":"Classes constructors properties inheritance","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/category/classes-constructors-properties-inheritance"}}');var s=i(4848),t=i(8453);const c={title:"Exception Handling"},o="Exception Handling",l={},a=[{value:"\ud83d\udd39 What is an Exception?",id:"-what-is-an-exception",level:2},{value:"\ud83d\udd39 Try-Catch Block",id:"-try-catch-block",level:2},{value:"\ud83d\udd39 Catching Specific Exceptions",id:"-catching-specific-exceptions",level:2},{value:"\ud83d\udd39 Finally Block",id:"-finally-block",level:2},{value:"\ud83e\uddf9 Clean Code Tips",id:"-clean-code-tips",level:2},{value:"\ud83d\udccc Summary",id:"-summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"exception-handling",children:"Exception Handling"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.strong,{children:"exception"})," is an error that occurs at runtime and interrupts the normal flow of your program."]}),"\n",(0,s.jsx)(n.h2,{id:"-what-is-an-exception",children:"\ud83d\udd39 What is an Exception?"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.strong,{children:"exception"})," is an error that occurs at runtime and interrupts the normal flow of your program. If not handled properly, it can crash the application."]}),"\n",(0,s.jsx)(n.p,{children:"Examples of situations that may cause exceptions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Dividing by zero"}),"\n",(0,s.jsx)(n.li,{children:"Accessing an invalid array index"}),"\n",(0,s.jsx)(n.li,{children:"Converting invalid input"}),"\n",(0,s.jsx)(n.li,{children:"Working with unavailable files"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"int x = 10;\nint y = 0;\nint result = x / y; // Runtime exception: DivideByZeroException\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,s.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"What is the difference between a compile-time error and a runtime exception?"}),"\n",(0,s.jsx)(n.li,{children:"Can you guess what kind of exceptions might occur in user input?"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,s.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Try dividing a number by zero and observe the behavior."}),"\n",(0,s.jsxs)(n.li,{children:["Try parsing the string ",(0,s.jsx)(n.code,{children:'"abc"'})," into an integer using ",(0,s.jsx)(n.code,{children:"int.Parse"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-try-catch-block",children:"\ud83d\udd39 Try-Catch Block"}),"\n",(0,s.jsxs)(n.p,{children:["Use a ",(0,s.jsx)(n.code,{children:"try-catch"})," block to catch and handle exceptions so your program can continue running."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'try\n{\n    int x = 10;\n    int y = 0;\n    int result = x / y;\n}\ncatch\n{\n    Console.WriteLine("Something went wrong!");\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"and"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'try\n{\n    Console.Write("Enter a number: ");\n    int number = int.Parse(Console.ReadLine());\n    int result = 100 / number;\n    Console.WriteLine($"Result: {result}");\n}\ncatch\n{\n    Console.WriteLine("Invalid input or division by zero!");\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,s.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["What happens if you remove the ",(0,s.jsx)(n.code,{children:"try-catch"})," block?"]}),"\n",(0,s.jsxs)(n.li,{children:["Can one ",(0,s.jsx)(n.code,{children:"catch"})," block handle all exception types?"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,s.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Write a program that asks for a number from the user and divides 100 by that number using try-catch."}),"\n",(0,s.jsx)(n.li,{children:"Add a catch block that prints a custom message if an exception occurs."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-catching-specific-exceptions",children:"\ud83d\udd39 Catching Specific Exceptions"}),"\n",(0,s.jsxs)(n.p,{children:["You can catch ",(0,s.jsx)(n.strong,{children:"specific exception types"})," to handle different error cases more precisely."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'try\n{\n    Console.Write("Enter a number: ");\n    int number = int.Parse(Console.ReadLine());\n    Console.WriteLine(100 / number);\n}\ncatch (FormatException)\n{\n    Console.WriteLine("Please enter a valid number.");\n}\ncatch (DivideByZeroException)\n{\n    Console.WriteLine("Cannot divide by zero.");\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,s.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"What\u2019s the benefit of catching specific exceptions?"}),"\n",(0,s.jsx)(n.li,{children:"Can you catch multiple exceptions in a single try block?"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,s.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Handle both ",(0,s.jsx)(n.code,{children:"DivideByZeroException"})," and ",(0,s.jsx)(n.code,{children:"FormatException"})," separately in the same program."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-finally-block",children:"\ud83d\udd39 Finally Block"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"finally"})," block is always executed whether an exception occurs or not \u2014 ideal for cleanup (e.g. closing files or connections)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'try\n{\n    int number = 10;\n    Console.WriteLine(100 / number);\n}\ncatch\n{\n    Console.WriteLine("An error occurred.");\n}\nfinally\n{\n    Console.WriteLine("Operation complete.");\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,s.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When does the ",(0,s.jsx)(n.code,{children:"finally"})," block run?"]}),"\n",(0,s.jsxs)(n.li,{children:["Can you use a ",(0,s.jsx)(n.code,{children:"finally"})," block without a ",(0,s.jsx)(n.code,{children:"catch"}),"?"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,s.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a program with ",(0,s.jsx)(n.code,{children:"try-catch-finally"})," where:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"try"})," performs a division"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"catch"})," handles exceptions"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"finally"})," prints ",(0,s.jsx)(n.code,{children:'"Operation complete"'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-clean-code-tips",children:"\ud83e\uddf9 Clean Code Tips"}),"\n",(0,s.jsx)(n.p,{children:"Exception handling is not a substitute for writing clean and predictable code. Here are some important best practices:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Don\u2019t use try-catch to hide problems"}),": Use it to handle expected errors, not to silence bugs."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Each method should do one thing"}),": Don't mix parsing, logic, and output in one block. Separate responsibilities."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validate before throwing"}),": Use ",(0,s.jsx)(n.code,{children:"if"})," checks to prevent obvious exceptions like divide-by-zero."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Avoid deep nesting"}),": Don\u2019t overuse try-catch inside loops or nested blocks."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Never leave catch blocks empty"}),": Always log or show something meaningful."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u2705 A clean method might look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'int GetUserInput()\n{\n    Console.Write("Enter a number: ");\n    return int.Parse(Console.ReadLine());\n}\n\nint Divide(int a, int b)\n{\n    if (b == 0)\n        throw new DivideByZeroException();\n    return a / b;\n}\n\ntry\n{\n    int number = GetUserInput();\n    int result = Divide(100, number);\n    Console.WriteLine($"Result: {result}");\n}\ncatch (FormatException)\n{\n    Console.WriteLine("Input must be a valid number.");\n}\ncatch (DivideByZeroException)\n{\n    Console.WriteLine("Cannot divide by zero.");\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,s.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Why is it better to validate inputs before entering a ",(0,s.jsx)(n.code,{children:"try-catch"})," block?"]}),"\n",(0,s.jsxs)(n.li,{children:["What happens if you put too much logic inside a ",(0,s.jsx)(n.code,{children:"catch"})," block?"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,s.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Rewrite the program to:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use a ",(0,s.jsx)(n.code,{children:"for"})," or ",(0,s.jsx)(n.code,{children:"while"})," loop to ask the user for ",(0,s.jsx)(n.strong,{children:"at least 5 numbers"})]}),"\n",(0,s.jsxs)(n.li,{children:["Try dividing ",(0,s.jsx)(n.code,{children:"100"})," by each entered number"]}),"\n",(0,s.jsx)(n.li,{children:"Handle errors (like invalid input or divide-by-zero) cleanly"}),"\n",(0,s.jsxs)(n.li,{children:["Keep the logic for ",(0,s.jsx)(n.strong,{children:"input"}),", ",(0,s.jsx)(n.strong,{children:"calculation"}),", and ",(0,s.jsx)(n.strong,{children:"error handling"})," in separate methods"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-summary",children:"\ud83d\udccc Summary"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Keyword"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"try"})}),(0,s.jsx)(n.td,{children:"Wraps risky code that might throw errors"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"catch"})}),(0,s.jsx)(n.td,{children:"Handles exceptions when thrown"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"finally"})}),(0,s.jsx)(n.td,{children:"Executes code regardless of exception"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Exception"})}),(0,s.jsx)(n.td,{children:"Base class for all exceptions"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>o});var r=i(6540);const s={},t=r.createContext(s);function c(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);