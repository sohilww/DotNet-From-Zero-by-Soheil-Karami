"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[8315],{8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(6540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}},9450:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Contents/Session1/Classes-constructors-properties-inheritance/Enums copy","title":"Enums","description":"In C#, an enum is a special value type that lets you define a group of named constants.","source":"@site/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/09-Enums copy.md","sourceDirName":"Contents/Session1/04-Classes-constructors-properties-inheritance","slug":"/Contents/Session1/Classes-constructors-properties-inheritance/Enums copy","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Enums copy","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/blob/main/docs/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/09-Enums copy.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"title":"Enums","sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Interfaces","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Interface"},"next":{"title":"Struct vs Class","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Struct-vs-Class"}}');var i=s(4848),t=s(8453);const o={title:"Enums",sidebar_position:9},l="\ud83c\udfaf Enumerations (enum)",a={},c=[{value:"\ud83e\udde0 Why use enums?",id:"-why-use-enums",level:2},{value:"\ud83e\udde9 Defining an Enum",id:"-defining-an-enum",level:2},{value:"\ud83d\udd22 Under the Hood: What are enum values?",id:"-under-the-hood-what-are-enum-values",level:2},{value:"\ud83d\udd04 Using Enums in Code",id:"-using-enums-in-code",level:2},{value:"\u2753 Getting the Enum as a Number or String",id:"-getting-the-enum-as-a-number-or-string",level:2},{value:"\ud83e\udde0 Best Practices",id:"-best-practices",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-enumerations-enum",children:"\ud83c\udfaf Enumerations (enum)"})}),"\n",(0,i.jsxs)(n.p,{children:["In C#, an ",(0,i.jsx)(n.code,{children:"enum"})," is a special value type that lets you ",(0,i.jsx)(n.strong,{children:"define a group of named constants"}),".",(0,i.jsx)(n.br,{}),"\n","It makes your code ",(0,i.jsx)(n.strong,{children:"more readable"}),", ",(0,i.jsx)(n.strong,{children:"less error-prone"}),", and easier to manage than using raw numbers or strings."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-why-use-enums",children:"\ud83e\udde0 Why use enums?"}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s say we\u2019re building a system for different ",(0,i.jsx)(n.strong,{children:"types of trees"}),".",(0,i.jsx)(n.br,{}),"\n","We could represent tree types using strings like ",(0,i.jsx)(n.code,{children:'"Apple"'}),", ",(0,i.jsx)(n.code,{children:'"Olive"'}),", ",(0,i.jsx)(n.code,{children:'"Pine"'})," \u2014 but what if someone mistypes ",(0,i.jsx)(n.code,{children:'"Applle"'}),"?"]}),"\n",(0,i.jsxs)(n.p,{children:["That\u2019s why we use an ",(0,i.jsx)(n.code,{children:"enum"})," \u2014 it gives us a controlled set of options."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-defining-an-enum",children:"\ud83e\udde9 Defining an Enum"}),"\n",(0,i.jsxs)(n.p,{children:["To define an enum, use the ",(0,i.jsx)(n.code,{children:"enum"})," keyword followed by a name and a list of values."]}),"\n",(0,i.jsx)(n.p,{children:"\ud83e\uddfe Example: Tree types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"enum TreeType\r\n{\r\n    Apple,\r\n    Olive,\r\n    Pine\r\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-under-the-hood-what-are-enum-values",children:"\ud83d\udd22 Under the Hood: What are enum values?"}),"\n",(0,i.jsxs)(n.p,{children:["By default, each enum value has an ",(0,i.jsx)(n.strong,{children:"underlying integer"})," starting from ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"So the above enum will be treated like:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TreeType.Apple"})," \u2192 ",(0,i.jsx)(n.code,{children:"0"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TreeType.Olive"})," \u2192 ",(0,i.jsx)(n.code,{children:"1"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TreeType.Pine"})," \u2192 ",(0,i.jsx)(n.code,{children:"2"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"You can override these values manually if you want."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"enum TreeType\r\n{\r\n    Apple = 1,\r\n    Olive = 3,\r\n    Pine = 5\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-using-enums-in-code",children:"\ud83d\udd04 Using Enums in Code"}),"\n",(0,i.jsx)(n.p,{children:"You can use enums in your class like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'class Tree\r\n{\r\n    public TreeType Type;\r\n\r\n    public Tree(TreeType type)\r\n    {\r\n        Type = type;\r\n    }\r\n\r\n    public void Describe()\r\n    {\r\n        Console.WriteLine($"This is a {Type} tree.");\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This makes it much clearer and type-safe."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-getting-the-enum-as-a-number-or-string",children:"\u2753 Getting the Enum as a Number or String"}),"\n",(0,i.jsx)(n.p,{children:"Enums can be:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Cast to ",(0,i.jsx)(n.code,{children:"int"})," \u2192 for storing in database or comparing"]}),"\n",(0,i.jsxs)(n.li,{children:["Converted to ",(0,i.jsx)(n.code,{children:"string"})," \u2192 for display"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"TreeType myTreeType = TreeType.Olive;\r\n\r\nint typeAsNumber = (int)myTreeType;\r\nstring typeAsString = myTreeType.ToString();\r\n\r\nConsole.WriteLine(typeAsNumber);   // Output: 1 (or 3 if custom)\r\nConsole.WriteLine(typeAsString);   // Output: Olive\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-best-practices",children:"\ud83e\udde0 Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"PascalCase"})," for enum names and values"]}),"\n",(0,i.jsx)(n.li,{children:"Avoid assigning random integers manually unless necessary"}),"\n",(0,i.jsxs)(n.li,{children:["Use enums when the set of values is ",(0,i.jsx)(n.strong,{children:"fixed and known ahead of time"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Why might enums be better than using strings or numbers directly?"}),"\n",(0,i.jsx)(n.li,{children:"Can you think of a real-life system (like a game, app, or website) that would benefit from enums?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Create an enum called ",(0,i.jsx)(n.code,{children:"WeatherType"})," with values: ",(0,i.jsx)(n.code,{children:"Sunny"}),", ",(0,i.jsx)(n.code,{children:"Rainy"}),", ",(0,i.jsx)(n.code,{children:"Cloudy"}),", ",(0,i.jsx)(n.code,{children:"Snowy"})]}),"\n",(0,i.jsxs)(n.li,{children:["Write a method that takes a ",(0,i.jsx)(n.code,{children:"WeatherType"}),' and prints a message like "It\'s a sunny day!"']}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);