"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[6160],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(6540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}},8815:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Contents/Session2/EF-Core","title":"EF Core","description":"EF Core is a modern, lightweight ORM for .NET. It maps your C# classes to database tables and lets you query data with LINQ, while EF Core translates queries to SQL and executes them on the database.","source":"@site/docs/Contents/Session2/08-EF-Core.md","sourceDirName":"Contents/Session2","slug":"/Contents/Session2/EF-Core","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session2/EF-Core","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/blob/main/docs/docs/Contents/Session2/08-EF-Core.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"EF Core"},"sidebar":"tutorialSidebar","previous":{"title":"LINQ","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session2/LINQ"},"next":{"title":"Full Course Outline","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Information/course-outline"}}');var i=r(4848),t=r(8453);const o={title:"EF Core"},a="Entity Framework Core (EF Core)",l={},d=[{value:"\ud83d\udd39 Why EF Core?",id:"-why-ef-core",level:2},{value:"\ud83d\udd39 Project Setup (Minimal)",id:"-project-setup-minimal",level:2},{value:"\ud83d\udd39 Model &amp; DbContext",id:"-model--dbcontext",level:2},{value:"\ud83d\udd39 Migrations (Create/Update the Database)",id:"-migrations-createupdate-the-database",level:2},{value:"\ud83d\udd39 Basic CRUD (Create / Read / Update / Delete)",id:"-basic-crud-create--read--update--delete",level:2},{value:"Helper to get a context",id:"helper-to-get-a-context",level:3},{value:"Create",id:"create",level:3},{value:"Read (LINQ Queries)",id:"read-linq-queries",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"\ud83d\udd39 Relationships &amp; Loading Data",id:"-relationships--loading-data",level:2},{value:"Include (eager loading)",id:"include-eager-loading",level:3},{value:"Select optimized projections",id:"select-optimized-projections",level:3},{value:"\ud83d\udd39 Tracking vs. No-Tracking",id:"-tracking-vs-no-tracking",level:2},{value:"\ud83d\udd39 Async, Paging, Sorting",id:"-async-paging-sorting",level:2},{value:"\ud83d\udd39 Async and Await with EF Core",id:"-async-and-await-with-ef-core",level:2},{value:"Why Async?",id:"why-async",level:3},{value:"Example: Querying with Async",id:"example-querying-with-async",level:3},{value:"Example: FirstOrDefaultAsync",id:"example-firstordefaultasync",level:3},{value:"Example: SaveChangesAsync",id:"example-savechangesasync",level:3},{value:"When to Use Async",id:"when-to-use-async",level:3},{value:"\ud83d\udd39 Transactions &amp; Concurrency (Intro)",id:"-transactions--concurrency-intro",level:2},{value:"Simple transaction",id:"simple-transaction",level:3},{value:"\ud83d\udd39 Error Handling (Friendly Failures)",id:"-error-handling-friendly-failures",level:2},{value:"\ud83d\udd39 Best Practices (Quick Checklist)",id:"-best-practices-quick-checklist",level:2},{value:"\ud83d\udccc Summary",id:"-summary",level:2}];function c(e){const n={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"entity-framework-core-ef-core",children:"Entity Framework Core (EF Core)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"EF Core"})," is a modern, lightweight ORM for .NET. It maps your C# classes to database tables and lets you query data with ",(0,i.jsx)(n.strong,{children:"LINQ"}),", while EF Core translates queries to SQL and executes them on the database."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-why-ef-core",children:"\ud83d\udd39 Why EF Core?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Write queries in ",(0,i.jsx)(n.strong,{children:"C# with LINQ"})," instead of raw SQL."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Change tracking"})," for updates: modify objects, then ",(0,i.jsx)(n.code,{children:"SaveChanges()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Migrations"})," to evolve your schema safely."]}),"\n",(0,i.jsx)(n.li,{children:"Works with multiple providers (SQL Server, PostgreSQL, SQLite, MySQL, etc.)."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"What benefits does an ORM provide compared to hand-written SQL?"}),"\n",(0,i.jsx)(n.li,{children:"When might you still prefer raw SQL?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"List three risks that EF Core reduces for a beginner team."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-project-setup-minimal",children:"\ud83d\udd39 Project Setup (Minimal)"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Install a provider (example: SQL Server) and EF tools:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"dotnet add package Microsoft.EntityFrameworkCore\r\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\r\ndotnet add package Microsoft.EntityFrameworkCore.Tools\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Add a ",(0,i.jsx)(n.strong,{children:"connection string"})," (e.g., in ",(0,i.jsx)(n.code,{children:"appsettings.json"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'{\r\n  "ConnectionStrings": {\r\n    "AppDb": "Server=localhost;Database=EfCoreDemo;Trusted_Connection=True;MultipleActiveResultSets=true;TrustServerCertificate=True"\r\n  }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Wire up ",(0,i.jsx)(n.strong,{children:"DbContext"})," in ",(0,i.jsx)(n.code,{children:"Program.cs"})," (ASP.NET Core):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'builder.Services.AddDbContext<AppDbContext>(options =>\r\n    options.UseSqlServer(builder.Configuration.GetConnectionString("AppDb")));\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["What does the provider package (e.g., ",(0,i.jsx)(n.code,{children:"SqlServer"}),") add beyond ",(0,i.jsx)(n.code,{children:"Microsoft.EntityFrameworkCore"}),"?"]}),"\n",(0,i.jsx)(n.li,{children:"Where should secrets (SQL credentials) be stored in production?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Switch the provider to ",(0,i.jsx)(n.strong,{children:"SQLite"})," and run the same project with a local file database."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-model--dbcontext",children:"\ud83d\udd39 Model & DbContext"}),"\n",(0,i.jsxs)(n.p,{children:["Define your domain models and a ",(0,i.jsx)(n.code,{children:"DbContext"})," to represent the database session."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using Microsoft.EntityFrameworkCore;\r\n\r\npublic sealed class Author\r\n{\r\n    public int Id { get; set; }\r\n    public string FullName { get; set; } = string.Empty;\r\n\r\n    // Navigation\r\n    public List<Book> Books { get; set; } = new List<Book>();\r\n}\r\n\r\npublic sealed class Book\r\n{\r\n    public int Id { get; set; }\r\n    public string Title { get; set; } = string.Empty;\r\n\r\n    // FK + Navigation\r\n    public int AuthorId { get; set; }\r\n    public Author? Author { get; set; }\r\n}\r\n\r\npublic sealed class AppDbContext : DbContext\r\n{\r\n    public AppDbContext(DbContextOptions<AppDbContext> options)\r\n        : base(options) { }\r\n\r\n    public DbSet<Author> Authors => Set<Author>();\r\n    public DbSet<Book> Books => Set<Book>();\r\n\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        modelBuilder.Entity<Author>()\r\n            .Property(a => a.FullName)\r\n            .HasMaxLength(200)\r\n            .IsRequired();\r\n\r\n        modelBuilder.Entity<Book>()\r\n            .Property(b => b.Title)\r\n            .HasMaxLength(300)\r\n            .IsRequired();\r\n\r\n        modelBuilder.Entity<Book>()\r\n            .HasOne(b => b.Author)\r\n            .WithMany(a => a.Books)\r\n            .HasForeignKey(b => b.AuthorId);\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["What is the difference between ",(0,i.jsx)(n.strong,{children:"navigation properties"})," and ",(0,i.jsx)(n.strong,{children:"foreign keys"}),"?"]}),"\n",(0,i.jsxs)(n.li,{children:["When would you prefer ",(0,i.jsx)(n.strong,{children:"Fluent API"})," over ",(0,i.jsx)(n.strong,{children:"Data Annotations"}),"?"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add an ",(0,i.jsx)(n.code,{children:"Isbn"})," property to ",(0,i.jsx)(n.code,{children:"Book"})," with ",(0,i.jsx)(n.code,{children:"HasMaxLength(13)"})," and mark it required."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-migrations-createupdate-the-database",children:"\ud83d\udd39 Migrations (Create/Update the Database)"}),"\n",(0,i.jsx)(n.p,{children:"Create and apply migrations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"dotnet ef migrations add InitialCreate\r\ndotnet ef database update\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"add"}),": scaffolds the migration based on model changes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"update"}),": applies migrations to the target database."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"What happens if you change your model but forget to add a migration?"}),"\n",(0,i.jsx)(n.li,{children:"How do you revert a migration?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add a ",(0,i.jsx)(n.code,{children:"PublishedOn"})," (DateTime) to ",(0,i.jsx)(n.code,{children:"Book"}),", create a new migration, and update the DB."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-basic-crud-create--read--update--delete",children:"\ud83d\udd39 Basic CRUD (Create / Read / Update / Delete)"}),"\n",(0,i.jsx)(n.h3,{id:"helper-to-get-a-context",children:"Helper to get a context"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\n\r\nstatic AppDbContext CreateContext()\r\n{\r\n    DbContextOptions<AppDbContext> options =\r\n        new DbContextOptionsBuilder<AppDbContext>()\r\n            .UseSqlServer("Server=localhost;Database=EfCoreDemo;Trusted_Connection=True;TrustServerCertificate=True")\r\n            .Options;\r\n\r\n    return new AppDbContext(options);\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"create",children:"Create"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using (AppDbContext db = CreateContext())\r\n{\r\n    Author author = new Author { FullName = "Robert C. Martin" };\r\n    Book book = new Book { Title = "Clean Code", Author = author };\r\n\r\n    db.Authors.Add(author);   // or db.Add(author)\r\n    db.Books.Add(book);\r\n\r\n    int changes = db.SaveChanges();\r\n    Console.WriteLine($"Saved changes: {changes}");\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"read-linq-queries",children:"Read (LINQ Queries)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using (AppDbContext db = CreateContext())\r\n{\r\n    List<string> titles = db.Books\r\n        .Where(b => b.Title.Contains("Clean"))\r\n        .OrderBy(b => b.Title)\r\n        .Select(b => b.Title)\r\n        .ToList();\r\n\r\n    foreach (string t in titles) Console.WriteLine(t);\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"update",children:"Update"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using (AppDbContext db = CreateContext())\r\n{\r\n    Book? book = db.Books.FirstOrDefault(b => b.Title == "Clean Code");\r\n    if (book != null)\r\n    {\r\n        book.Title = "Clean Code (2nd Edition)";\r\n        db.SaveChanges();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"delete",children:"Delete"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using (AppDbContext db = CreateContext())\r\n{\r\n    Book? book = db.Books.FirstOrDefault(b => b.Title.StartsWith("Clean"));\r\n    if (book != null)\r\n    {\r\n        db.Books.Remove(book);\r\n        db.SaveChanges();\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["What does EF track after you call ",(0,i.jsx)(n.code,{children:"Add"})," vs after ",(0,i.jsx)(n.code,{children:"Attach"}),"?"]}),"\n",(0,i.jsxs)(n.li,{children:["Why is ",(0,i.jsx)(n.code,{children:"FirstOrDefault"})," often safer than ",(0,i.jsx)(n.code,{children:"First"}),"?"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Insert two authors and three books, then rename one book and delete another."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-relationships--loading-data",children:"\ud83d\udd39 Relationships & Loading Data"}),"\n",(0,i.jsx)(n.h3,{id:"include-eager-loading",children:"Include (eager loading)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\n\r\nusing (AppDbContext db = CreateContext())\r\n{\r\n    List<Author> authors = db.Authors\r\n        .Include(a => a.Books)\r\n        .OrderBy(a => a.FullName)\r\n        .ToList();\r\n\r\n    foreach (Author a in authors)\r\n    {\r\n        Console.WriteLine(a.FullName);\r\n        foreach (Book b in a.Books)\r\n        {\r\n            Console.WriteLine($"  - {b.Title}");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"select-optimized-projections",children:"Select optimized projections"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\n\r\nusing (AppDbContext db = CreateContext())\r\n{\r\n    var authorBooks = db.Authors\r\n        .OrderBy(a => a.FullName)\r\n        .Select(a => new\r\n        {\r\n            Name = a.FullName,\r\n            Titles = a.Books.Select(b => b.Title).ToList()\r\n        })\r\n        .ToList();\r\n\r\n    foreach (var item in authorBooks) Console.WriteLine($"{item.Name} ({item.Titles.Count})");\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When should you prefer ",(0,i.jsx)(n.code,{children:"Include"})," vs. projecting only the fields you need?"]}),"\n",(0,i.jsxs)(n.li,{children:["What performance issues can ",(0,i.jsx)(n.code,{children:"Include"})," chains cause?"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Load authors with their books, but only project ",(0,i.jsx)(n.code,{children:"{ AuthorName, BookCount }"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-tracking-vs-no-tracking",children:"\ud83d\udd39 Tracking vs. No-Tracking"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tracking"})," (default): EF watches entities; changes are persisted on ",(0,i.jsx)(n.code,{children:"SaveChanges()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No-Tracking"}),": Faster for read-only queries; EF doesn\u2019t track entities."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\n\r\nusing (AppDbContext db = CreateContext())\r\n{\r\n    List<Book> readOnly = db.Books\r\n        .AsNoTracking()\r\n        .Where(b => b.Title.Contains("Clean"))\r\n        .ToList();\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Why is ",(0,i.jsx)(n.code,{children:"AsNoTracking()"})," helpful in API read endpoints?"]}),"\n",(0,i.jsxs)(n.li,{children:["What happens if you modify a no-tracked entity and call ",(0,i.jsx)(n.code,{children:"SaveChanges()"}),"?"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Measure (informally) the difference between a tracked vs no-tracked read on 10k rows."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-async-paging-sorting",children:"\ud83d\udd39 Async, Paging, Sorting"}),"\n",(0,i.jsx)(n.p,{children:"Use async to avoid blocking threads (esp. in web apps). Combine with paging for scalable queries."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\n\r\nusing (AppDbContext db = CreateContext())\r\n{\r\n    int pageIndex = 0; // zero-based\r\n    int pageSize = 10;\r\n\r\n    List<Book> page = await db.Books\r\n        .OrderBy(b => b.Title)\r\n        .Skip(pageIndex * pageSize)\r\n        .Take(pageSize)\r\n        .AsNoTracking()\r\n        .ToListAsync();\r\n\r\n    Console.WriteLine($"Fetched {page.Count} books");\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Why should you always sort before ",(0,i.jsx)(n.code,{children:"Skip/Take"}),"?"]}),"\n",(0,i.jsx)(n.li,{children:"Where does async provide the biggest benefit?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Implement a method ",(0,i.jsx)(n.code,{children:"GetBooksPageAsync(int page, int size)"})," returning titles only."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-async-and-await-with-ef-core",children:"\ud83d\udd39 Async and Await with EF Core"}),"\n",(0,i.jsxs)(n.p,{children:["Entity Framework Core provides ",(0,i.jsx)(n.strong,{children:"async versions"})," of most query and save methods (",(0,i.jsx)(n.code,{children:"ToListAsync"}),", ",(0,i.jsx)(n.code,{children:"FirstOrDefaultAsync"}),", ",(0,i.jsx)(n.code,{children:"SaveChangesAsync"}),", etc.).",(0,i.jsx)(n.br,{}),"\n","These are critical in web applications where scalability and responsiveness matter."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"why-async",children:"Why Async?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Non-blocking I/O"}),": Database operations take time, but ",(0,i.jsx)(n.code,{children:"async"})," lets threads return to the pool while waiting."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Better scalability"}),": In ASP.NET Core, this allows the server to handle more concurrent requests."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Responsiveness"}),": Keeps applications (especially web apps and UIs) responsive under load."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"example-querying-with-async",children:"Example: Querying with Async"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using Microsoft.EntityFrameworkCore;\r\n\r\nusing (AppDbContext db = CreateContext())\r\n{\r\n    List<Book> books = await db.Books\r\n        .OrderBy(b => b.Title)\r\n        .ToListAsync();\r\n\r\n    foreach (Book b in books)\r\n    {\r\n        Console.WriteLine(b.Title);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"example-firstordefaultasync",children:"Example: FirstOrDefaultAsync"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\n\r\nusing (AppDbContext db = CreateContext())\r\n{\r\n    Book? book = await db.Books\r\n        .FirstOrDefaultAsync(b => b.Title.Contains("Clean"));\r\n\r\n    if (book != null)\r\n    {\r\n        Console.WriteLine($"Found: {book.Title}");\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"example-savechangesasync",children:"Example: SaveChangesAsync"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\n\r\nusing (AppDbContext db = CreateContext())\r\n{\r\n    Author author = new Author { FullName = "Kent Beck" };\r\n    db.Authors.Add(author);\r\n\r\n    int changes = await db.SaveChangesAsync();\r\n    Console.WriteLine($"Saved {changes} changes.");\r\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-async",children:"When to Use Async"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Always in ",(0,i.jsx)(n.strong,{children:"web applications"})," (ASP.NET Core controllers, APIs)."]}),"\n",(0,i.jsxs)(n.li,{children:["Useful in ",(0,i.jsx)(n.strong,{children:"desktop apps"})," with UI threads (to avoid blocking)."]}),"\n",(0,i.jsxs)(n.li,{children:["Less critical in ",(0,i.jsx)(n.strong,{children:"small console apps"})," or background jobs with few queries."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"What happens to a thread while an async EF Core query is waiting on the database?"}),"\n",(0,i.jsx)(n.li,{children:"Why is async less critical in a console app with a single user?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Convert an existing sync query in your project to use ",(0,i.jsx)(n.code,{children:"ToListAsync"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Write a method ",(0,i.jsx)(n.code,{children:"GetAuthorByNameAsync(string name)"})," that returns the author or ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Insert a new ",(0,i.jsx)(n.code,{children:"Book"})," and save it using ",(0,i.jsx)(n.code,{children:"SaveChangesAsync"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Tip"}),": Never block async calls with ",(0,i.jsx)(n.code,{children:".Result"})," or ",(0,i.jsx)(n.code,{children:".Wait()"})," \u2014 this can cause deadlocks in ASP.NET Core. Always use ",(0,i.jsx)(n.code,{children:"await"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"-transactions--concurrency-intro",children:"\ud83d\udd39 Transactions & Concurrency (Intro)"}),"\n",(0,i.jsx)(n.h3,{id:"simple-transaction",children:"Simple transaction"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore.Storage;\r\n\r\nusing (AppDbContext db = CreateContext())\r\n{\r\n    using (IDbContextTransaction tx = db.Database.BeginTransaction())\r\n    {\r\n        try\r\n        {\r\n            Author author = new Author { FullName = "Martin Fowler" };\r\n            db.Authors.Add(author);\r\n            db.SaveChanges();\r\n\r\n            Book book = new Book { Title = "Refactoring", AuthorId = author.Id };\r\n            db.Books.Add(book);\r\n            db.SaveChanges();\r\n\r\n            tx.Commit();\r\n        }\r\n        catch\r\n        {\r\n            tx.Rollback();\r\n            throw;\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["For optimistic concurrency, add a ",(0,i.jsx)(n.code,{children:"RowVersion"})," (",(0,i.jsx)(n.code,{children:"byte[]"})," with ",(0,i.jsx)(n.code,{children:".IsRowVersion()"}),") and handle ",(0,i.jsx)(n.code,{children:"DbUpdateConcurrencyException"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"What problem do transactions solve?"}),"\n",(0,i.jsx)(n.li,{children:"How would you detect and resolve a concurrency conflict?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add a ",(0,i.jsx)(n.code,{children:"RowVersion"})," to ",(0,i.jsx)(n.code,{children:"Book"})," and simulate a concurrency conflict."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-error-handling-friendly-failures",children:"\ud83d\udd39 Error Handling (Friendly Failures)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\n\r\ntry\r\n{\r\n    using AppDbContext db = CreateContext();\r\n\r\n    Book book = new Book { Title = "" }; // invalid: required\r\n    db.Books.Add(book);\r\n    db.SaveChanges();\r\n}\r\ncatch (DbUpdateException ex)\r\n{\r\n    Console.WriteLine("A database update error occurred.");\r\n    Console.WriteLine(ex.InnerException?.Message);\r\n}\r\ncatch (Exception ex)\r\n{\r\n    Console.WriteLine($"Unexpected: {ex.Message}");\r\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Validate early (e.g., in services) to avoid round-trip failures to the DB."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Why should you validate DTOs before mapping to entities?"}),"\n",(0,i.jsxs)(n.li,{children:["What details are safe to log from ",(0,i.jsx)(n.code,{children:"DbUpdateException"}),"?"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add simple guard clauses to ensure ",(0,i.jsx)(n.code,{children:"Title"})," is not empty before saving."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-best-practices-quick-checklist",children:"\ud83d\udd39 Best Practices (Quick Checklist)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Prefer ",(0,i.jsx)(n.strong,{children:"projections"})," (",(0,i.jsx)(n.code,{children:"Select"}),") to return only what you need."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"AsNoTracking()"})})," for read-only queries."]}),"\n",(0,i.jsxs)(n.li,{children:["Always ",(0,i.jsx)(n.strong,{children:"sort before paging"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Keep ",(0,i.jsx)(n.strong,{children:"transactions"})," small and focused."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.strong,{children:"async"})," for I/O-bound data access paths."]}),"\n",(0,i.jsxs)(n.li,{children:["Evolve schema with ",(0,i.jsx)(n.strong,{children:"migrations"}),", avoid manual schema drift."]}),"\n",(0,i.jsxs)(n.li,{children:["Centralize ",(0,i.jsx)(n.strong,{children:"validation"})," and avoid leaking entities outside domain boundaries."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-summary",children:"\ud83d\udccc Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Topic"}),(0,i.jsx)(n.th,{children:"Purpose / Takeaway"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DbContext & Models"}),(0,i.jsx)(n.td,{children:"Map classes to tables, set relationships"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Migrations"}),(0,i.jsx)(n.td,{children:"Version and apply schema changes safely"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"CRUD + LINQ"}),(0,i.jsx)(n.td,{children:"Query, modify, and persist using C# and LINQ"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Loading Data"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"Include"})," or projection; prefer minimal payloads"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Tracking"}),(0,i.jsxs)(n.td,{children:["Default tracks changes; use ",(0,i.jsx)(n.code,{children:"AsNoTracking"})," for read-only"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Async & Paging"}),(0,i.jsx)(n.td,{children:"Scale and keep threads free; always order before paging"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Transactions"}),(0,i.jsx)(n.td,{children:"Group operations atomically"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Seeding"}),(0,i.jsx)(n.td,{children:"Bootstrap reference data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Error Handling"}),(0,i.jsxs)(n.td,{children:["Catch ",(0,i.jsx)(n.code,{children:"DbUpdateException"}),"; validate early"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Best Practices"}),(0,i.jsx)(n.td,{children:"Projection, no-tracking, small transactions, async, migrations"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);