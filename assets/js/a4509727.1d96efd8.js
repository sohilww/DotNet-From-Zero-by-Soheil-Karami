"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[1974],{8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},8923:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Contents/Session2/LINQ","title":"LINQ","description":"LINQ lets you write expressive, SQL-like queries directly in C# against in-memory collections, databases, XML, etc. It improves readability, reduces boilerplate, and encourages declarative data processing.","source":"@site/docs/Contents/Session2/07-LINQ.md","sourceDirName":"Contents/Session2","slug":"/Contents/Session2/LINQ","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session2/LINQ","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/blob/main/docs/docs/Contents/Session2/07-LINQ.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"LINQ"},"sidebar":"tutorialSidebar","previous":{"title":"GROUP BY and Aggregate Functions","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session2/Database/GROUP-BY-and-Aggregate-Functions"},"next":{"title":"EF Core","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session2/EF-Core"}}');var i=r(4848),t=r(8453);const l={title:"LINQ"},o="LINQ (Language Integrated Query)",d={},c=[{value:"\ud83d\udd39 Why LINQ?",id:"-why-linq",level:2},{value:"\ud83d\udd39 Data Sources LINQ Can Query",id:"-data-sources-linq-can-query",level:2},{value:"Example: LINQ to Objects (in-memory)",id:"example-linq-to-objects-in-memory",level:3},{value:"Example: LINQ to XML",id:"example-linq-to-xml",level:3},{value:"\ud83d\udd39 From Loop to LINQ (Even Numbers)",id:"-from-loop-to-linq-even-numbers",level:2},{value:"Without LINQ: classic <code>for</code> loop",id:"without-linq-classic-for-loop",level:3},{value:"With LINQ \u2014 Query Syntax",id:"with-linq--query-syntax",level:3},{value:"With LINQ \u2014 Method Syntax",id:"with-linq--method-syntax",level:3},{value:"\ud83d\udd39 Query Syntax vs Method Syntax",id:"-query-syntax-vs-method-syntax",level:2},{value:"\ud83d\udd39 Core Operators: <code>Where</code>, <code>Select</code>, <code>OrderBy</code>, <code>ThenBy</code>, <code>OrderByDescending</code>",id:"-core-operators-where-select-orderby-thenby-orderbydescending",level:2},{value:"<code>Where</code> (filter)",id:"where-filter",level:3},{value:"<code>Select</code> (map / projection)",id:"select-map--projection",level:3},{value:"<code>OrderBy</code> / <code>ThenBy</code> / <code>OrderByDescending</code>",id:"orderby--thenby--orderbydescending",level:3},{value:"\ud83d\udd39 Element Operators: <code>First</code>, <code>FirstOrDefault</code>, <code>Last</code>, <code>Single</code>, <code>SingleOrDefault</code>",id:"-element-operators-first-firstordefault-last-single-singleordefault",level:2},{value:"\ud83d\udd39 Common Helpers: <code>Any</code>, <code>All</code>, <code>Contains</code>, <code>Distinct</code>, <code>Take</code>, <code>Skip</code>",id:"-common-helpers-any-all-contains-distinct-take-skip",level:2},{value:"\ud83d\udd39 <code>SelectMany</code> (flatten nested sequences)",id:"-selectmany-flatten-nested-sequences",level:2},{value:"\ud83d\udd39 Grouping: <code>GroupBy</code>",id:"-grouping-groupby",level:2},{value:"\ud83d\udd39 Aggregation: <code>Count</code>, <code>Sum</code>, <code>Average</code>, <code>Min</code>, <code>Max</code>",id:"-aggregation-count-sum-average-min-max",level:2},{value:"\ud83d\udd39 Deferred Execution",id:"-deferred-execution",level:2},{value:"\ud83d\udccc Summary",id:"-summary",level:2}];function a(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"linq-language-integrated-query",children:"LINQ (Language Integrated Query)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"LINQ"})," lets you write expressive, SQL-like queries directly in C# against in-memory collections, databases, XML, etc. It improves readability, reduces boilerplate, and encourages declarative data processing."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-why-linq",children:"\ud83d\udd39 Why LINQ?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Unified, readable queries in pure C#."}),"\n",(0,i.jsx)(n.li,{children:"Consistent operators across arrays, lists, and databases (with providers)."}),"\n",(0,i.jsx)(n.li,{children:"Fewer loops, less error-prone code."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"What kinds of data sources can LINQ query?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Why might a LINQ be safer than manual loops?"}),"\n",(0,i.jsxs)(n.li,{children:["List three places you would replace a ",(0,i.jsx)(n.code,{children:"for"})," loop with a LINQ query in your own codebase."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-data-sources-linq-can-query",children:"\ud83d\udd39 Data Sources LINQ Can Query"}),"\n",(0,i.jsxs)(n.p,{children:["LINQ is not limited to arrays or lists. It is designed to work with ",(0,i.jsxs)(n.strong,{children:["any data source that implements ",(0,i.jsx)(n.code,{children:"IEnumerable<T>"})," or ",(0,i.jsx)(n.code,{children:"IQueryable<T>"})]}),".",(0,i.jsx)(n.br,{}),"\n","This means the same query operators can be used across very different kinds of data."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"LINQ Provider"}),(0,i.jsx)(n.th,{children:"Example Sources"}),(0,i.jsx)(n.th,{children:"Notes"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"LINQ to Objects"})}),(0,i.jsx)(n.td,{children:"Arrays, Lists, Dictionaries, Collections"}),(0,i.jsxs)(n.td,{children:["Queries run in memory against ",(0,i.jsx)(n.code,{children:"IEnumerable<T>"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"LINQ to SQL / EF"})}),(0,i.jsx)(n.td,{children:"SQL Server, PostgreSQL, MySQL, etc."}),(0,i.jsx)(n.td,{children:"Queries are translated into SQL and executed in the database engine"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"LINQ to XML"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"XDocument"}),", ",(0,i.jsx)(n.code,{children:"XElement"})]}),(0,i.jsx)(n.td,{children:"Query XML trees using LINQ operators"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Custom Providers"})}),(0,i.jsx)(n.td,{children:"JSON APIs, NoSQL, in-house data formats"}),(0,i.jsx)(n.td,{children:"By implementing a provider, LINQ can target virtually any data source"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"example-linq-to-objects-in-memory",children:"Example: LINQ to Objects (in-memory)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int[] numbers = new int[] { 1, 2, 3, 4, 5 };\r\n\r\nIEnumerable<int> evens = numbers.Where(n => n % 2 == 0);\r\n\r\nforeach (int n in evens)\r\n{\r\n    Console.WriteLine(n);\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-linq-to-xml",children:"Example: LINQ to XML"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"XDocument doc = XDocument.Parse(@\"\r\n<People>\r\n  <Person Name='Alice' Age='30' />\r\n  <Person Name='Bob' Age='25' />\r\n</People>\");\r\n\r\nIEnumerable<string> names =\r\n    doc.Descendants(\"Person\")\r\n       .Where(p => (int)p.Attribute(\"Age\") > 26)\r\n       .Select(p => (string)p.Attribute(\"Name\"));\r\n\r\nforeach (string name in names)\r\n{\r\n    Console.WriteLine(name); // Alice\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"What\u2019s the benefit of having a unified query language for such different sources?"}),"\n",(0,i.jsx)(n.li,{children:"Why do you think LINQ queries against a database should not always be written the same way as queries against an in-memory list?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Create an XML document with a few ",(0,i.jsx)(n.code,{children:"Book"})," elements."]}),"\n",(0,i.jsx)(n.li,{children:"Write a LINQ query to select all books published after the year 2015."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-from-loop-to-linq-even-numbers",children:"\ud83d\udd39 From Loop to LINQ (Even Numbers)"}),"\n",(0,i.jsxs)(n.h3,{id:"without-linq-classic-for-loop",children:["Without LINQ: classic ",(0,i.jsx)(n.code,{children:"for"})," loop"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int[] numbers = new int[] { 1, 2, 3, 4, 5, 6 };\r\n\r\nList<int> evenNumbersLoop = new List<int>();\r\nfor (int i = 0; i < numbers.Length; i++)\r\n{\r\n    if (numbers[i] % 2 == 0)\r\n    {\r\n        evenNumbersLoop.Add(numbers[i]);\r\n    }\r\n}\r\n\r\nforeach (int n in evenNumbersLoop)\r\n{\r\n    Console.WriteLine(n);\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"with-linq--query-syntax",children:"With LINQ \u2014 Query Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int[] numbers = new int[] { 1, 2, 3, 4, 5, 6 };\r\n\r\nIEnumerable<int> evenNumbersQuery =\r\n    from n in numbers\r\n    where n % 2 == 0\r\n    select n;\r\n\r\nforeach (int n in evenNumbersQuery)\r\n{\r\n    Console.WriteLine(n);\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"with-linq--method-syntax",children:"With LINQ \u2014 Method Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int[] numbers = new int[] { 1, 2, 3, 4, 5, 6 };\r\n\r\nIEnumerable<int> evenNumbersMethod =\r\n    numbers.Where(n => n % 2 == 0);\r\n\r\nforeach (int n in evenNumbersMethod)\r\n{\r\n    Console.WriteLine(n);\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Which version feels clearer to you and why?"}),"\n",(0,i.jsx)(n.li,{children:"How does the LINQ version reduce opportunities for bugs?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Print all numbers ",(0,i.jsx)(n.strong,{children:"greater than 10"})," from a new ",(0,i.jsx)(n.code,{children:"int[]"})," using both loop and LINQ."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-query-syntax-vs-method-syntax",children:"\ud83d\udd39 Query Syntax vs Method Syntax"}),"\n",(0,i.jsx)(n.p,{children:"Both styles are equivalent. Choose consistency across your codebase."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'string[] words = new string[] { "apple", "book", "car", "ball", "camera" };\r\n\r\n// Query syntax: words starting with \'c\', ordered by length\r\nIEnumerable<string> q1 =\r\n    from w in words\r\n    where w.StartsWith("c")\r\n    orderby w.Length\r\n    select w;\r\n\r\n// Method syntax: same result\r\nIEnumerable<string> q2 = words\r\n    .Where(w => w.StartsWith("c"))\r\n    .OrderBy(w => w.Length);\r\n\r\nforeach (string w in q1) Console.WriteLine(w);\r\nConsole.WriteLine("---");\r\nforeach (string w in q2) Console.WriteLine(w);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When would you prefer query syntax over method syntax?"}),"\n",(0,i.jsx)(n.li,{children:"How can mixing styles in one file impact readability?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Using both syntaxes, select words whose length is between 3 and 5 inclusive."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"-core-operators-where-select-orderby-thenby-orderbydescending",children:["\ud83d\udd39 Core Operators: ",(0,i.jsx)(n.code,{children:"Where"}),", ",(0,i.jsx)(n.code,{children:"Select"}),", ",(0,i.jsx)(n.code,{children:"OrderBy"}),", ",(0,i.jsx)(n.code,{children:"ThenBy"}),", ",(0,i.jsx)(n.code,{children:"OrderByDescending"})]}),"\n",(0,i.jsxs)(n.h3,{id:"where-filter",children:[(0,i.jsx)(n.code,{children:"Where"})," (filter)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int[] numbers = new int[] { 3, 7, 2, 8, 5, 10 };\r\nIEnumerable<int> filtered = numbers.Where(n => n > 5);\r\n\r\nforeach (int n in filtered) Console.WriteLine(n);\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"select-map--projection",children:[(0,i.jsx)(n.code,{children:"Select"})," (map / projection)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int[] numbers = new int[] { 1, 2, 3 };\r\nIEnumerable<int> squares = numbers.Select(n => n * n);\r\n\r\nforeach (int n in squares) Console.WriteLine(n);\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"orderby--thenby--orderbydescending",children:[(0,i.jsx)(n.code,{children:"OrderBy"})," / ",(0,i.jsx)(n.code,{children:"ThenBy"})," / ",(0,i.jsx)(n.code,{children:"OrderByDescending"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'string[] names = new string[] { "Ava", "Mina", "John", "Zed", "Adam" };\r\n\r\n// primary: by length ascending, secondary: by alphabetical\r\nIEnumerable<string> ordered = names\r\n    .OrderBy(n => n.Length)\r\n    .ThenBy(n => n);\r\n\r\nforeach (string n in ordered) Console.WriteLine(n);\r\n\r\nConsole.WriteLine("--- Desc by length ---");\r\nIEnumerable<string> orderedDesc = names.OrderByDescending(n => n.Length);\r\nforeach (string n in orderedDesc) Console.WriteLine(n);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["What\u2019s the difference between ",(0,i.jsx)(n.code,{children:"OrderBy"})," and ",(0,i.jsx)(n.code,{children:"ThenBy"}),"?"]}),"\n",(0,i.jsx)(n.li,{children:"Why might sorting by multiple keys be useful?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Sort a list of people by ",(0,i.jsx)(n.code,{children:"Age"}),", then by ",(0,i.jsx)(n.code,{children:"Name"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"-element-operators-first-firstordefault-last-single-singleordefault",children:["\ud83d\udd39 Element Operators: ",(0,i.jsx)(n.code,{children:"First"}),", ",(0,i.jsx)(n.code,{children:"FirstOrDefault"}),", ",(0,i.jsx)(n.code,{children:"Last"}),", ",(0,i.jsx)(n.code,{children:"Single"}),", ",(0,i.jsx)(n.code,{children:"SingleOrDefault"})]}),"\n",(0,i.jsxs)(n.p,{children:["These return a ",(0,i.jsx)(n.strong,{children:"single element"})," (or default) instead of a sequence."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int[] nums = new int[] { 2, 4, 6, 8 };\r\n\r\n// First: throws if sequence is empty or no match\r\nint firstEven = nums.First(n => n % 2 == 0);\r\n\r\n// FirstOrDefault: returns default(T) if empty or no match (0 for int)\r\nint firstOverTen = nums.FirstOrDefault(n => n > 10);\r\n\r\n// Last: throws if empty or no match\r\nint lastEven = nums.Last(n => n % 2 == 0);\r\n\r\n// Single: requires exactly one matching element; throws if 0 or >1\r\nint onlyEight = new int[] { 8 }.Single(n => n == 8);\r\n\r\n// SingleOrDefault: requires 0 or 1 match; throws if >1; returns default if 0\r\nint maybeNine = nums.SingleOrDefault(n => n == 9);\r\n\r\nConsole.WriteLine(firstEven);\r\nConsole.WriteLine(firstOverTen);  // 0\r\nConsole.WriteLine(lastEven);\r\nConsole.WriteLine(onlyEight);\r\nConsole.WriteLine(maybeNine);     // 0\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When is ",(0,i.jsx)(n.code,{children:"Single"})," safer than ",(0,i.jsx)(n.code,{children:"First"}),"?"]}),"\n",(0,i.jsxs)(n.li,{children:["Why can ",(0,i.jsx)(n.code,{children:"FirstOrDefault"})," hide bugs if you don\u2019t check for defaults?"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["From an array of emails, get the ",(0,i.jsx)(n.strong,{children:"single"})," email marked as primary. Handle the case where there are zero or multiple primaries."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"-common-helpers-any-all-contains-distinct-take-skip",children:["\ud83d\udd39 Common Helpers: ",(0,i.jsx)(n.code,{children:"Any"}),", ",(0,i.jsx)(n.code,{children:"All"}),", ",(0,i.jsx)(n.code,{children:"Contains"}),", ",(0,i.jsx)(n.code,{children:"Distinct"}),", ",(0,i.jsx)(n.code,{children:"Take"}),", ",(0,i.jsx)(n.code,{children:"Skip"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'int[] values = new int[] { 1, 2, 2, 3, 4, 5 };\r\n\r\n// Any: does any element match?\r\nbool hasEven = values.Any(v => v % 2 == 0);\r\n\r\n// All: do all elements match?\r\nbool allPositive = values.All(v => v > 0);\r\n\r\n// Contains: is a value present?\r\nbool hasTwo = values.Contains(2);\r\n\r\n// Distinct: remove duplicates\r\nIEnumerable<int> uniqueValues = values.Distinct();\r\n\r\n// Take/Skip: paging\r\nIEnumerable<int> page1 = values.Take(3); // first 3\r\nIEnumerable<int> page2 = values.Skip(3).Take(3);\r\n\r\nConsole.WriteLine(hasEven);\r\nConsole.WriteLine(allPositive);\r\nConsole.WriteLine(hasTwo);\r\nforeach (int v in uniqueValues) Console.WriteLine(v);\r\nConsole.WriteLine("--- page1 ---");\r\nforeach (int v in page1) Console.WriteLine(v);\r\nConsole.WriteLine("--- page2 ---");\r\nforeach (int v in page2) Console.WriteLine(v);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When does ",(0,i.jsx)(n.code,{children:"All"})," on an empty sequence return ",(0,i.jsx)(n.code,{children:"true"}),"?"]}),"\n",(0,i.jsxs)(n.li,{children:["How would you implement simple paging with ",(0,i.jsx)(n.code,{children:"Skip"}),"/",(0,i.jsx)(n.code,{children:"Take"}),"?"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Remove duplicates from a list of product IDs and return the first page of size 5."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"-selectmany-flatten-nested-sequences",children:["\ud83d\udd39 ",(0,i.jsx)(n.code,{children:"SelectMany"})," (flatten nested sequences)"]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"SelectMany"})," to flatten nested lists."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<List<int>> matrix = new List<List<int>>\r\n{\r\n    new List<int> { 1, 2, 3 },\r\n    new List<int> { 4, 5 },\r\n    new List<int> { 6 }\r\n};\r\n\r\nIEnumerable<int> flat = matrix.SelectMany(row => row);\r\n\r\nforeach (int n in flat) Console.WriteLine(n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["How is ",(0,i.jsx)(n.code,{children:"SelectMany"})," different from ",(0,i.jsx)(n.code,{children:"Select"}),"?"]}),"\n",(0,i.jsx)(n.li,{children:"When do you see nested sequences in real projects?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Given a ",(0,i.jsx)(n.code,{children:"List<User>"})," where each user has ",(0,i.jsx)(n.code,{children:"List<string> Roles"}),", list all ",(0,i.jsx)(n.strong,{children:"distinct"})," roles across all users."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"-grouping-groupby",children:["\ud83d\udd39 Grouping: ",(0,i.jsx)(n.code,{children:"GroupBy"})]}),"\n",(0,i.jsx)(n.p,{children:"Group elements by a key and iterate groups."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'string[] words = new string[] { "cat", "dog", "car", "apple", "cow" };\r\n\r\nIEnumerable<IGrouping<char, string>> groups = words.GroupBy(w => w[0]);\r\n\r\nforeach (IGrouping<char, string> g in groups)\r\n{\r\n    Console.WriteLine($"Group {g.Key}:");\r\n    foreach (string item in g)\r\n    {\r\n        Console.WriteLine($" - {item}");\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"What is the element type of groups and items?"}),"\n",(0,i.jsx)(n.li,{children:"How would you sort items inside each group by length?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Group people by birth year and print group sizes, ordered by year ascending."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"-aggregation-count-sum-average-min-max",children:["\ud83d\udd39 Aggregation: ",(0,i.jsx)(n.code,{children:"Count"}),", ",(0,i.jsx)(n.code,{children:"Sum"}),", ",(0,i.jsx)(n.code,{children:"Average"}),", ",(0,i.jsx)(n.code,{children:"Min"}),", ",(0,i.jsx)(n.code,{children:"Max"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int[] numbers = new int[] { 1, 2, 3, 4, 5 };\r\n\r\nint count = numbers.Count();\r\nint sum = numbers.Sum();\r\ndouble avg = numbers.Average();\r\nint min = numbers.Min();\r\nint max = numbers.Max();\r\n\r\nConsole.WriteLine(count);\r\nConsole.WriteLine(sum);\r\nConsole.WriteLine(avg);\r\nConsole.WriteLine(min);\r\nConsole.WriteLine(max);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["What happens if you call ",(0,i.jsx)(n.code,{children:"Average()"})," on an empty sequence?"]}),"\n",(0,i.jsx)(n.li,{children:"How can you safely compute an average when the sequence might be empty?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Compute min, max, and average of exam scores; print ",(0,i.jsx)(n.code,{children:'"N/A"'})," if there are no scores."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-deferred-execution",children:"\ud83d\udd39 Deferred Execution"}),"\n",(0,i.jsxs)(n.p,{children:["Queries are executed when iterated (e.g., ",(0,i.jsx)(n.code,{children:"foreach"}),", ",(0,i.jsx)(n.code,{children:"ToList()"}),", ",(0,i.jsx)(n.code,{children:"First()"}),"). Mutating the source before enumeration affects results."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<int> data = new List<int> { 1, 2, 3, 4, 5 };\r\nIEnumerable<int> query = data.Where(n => n > 2);\r\n\r\ndata.Add(100); // modify before enumeration\r\n\r\nforeach (int n in query)\r\n{\r\n    Console.WriteLine(n); // includes 100\r\n}\r\n\r\n// To freeze results now:\r\nList<int> snapshot = query.ToList();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Why can deferred execution be both a feature and a foot-gun?"}),"\n",(0,i.jsxs)(n.li,{children:["How do ",(0,i.jsx)(n.code,{children:"ToList()"})," / ",(0,i.jsx)(n.code,{children:"ToArray()"})," change the behavior?"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Build a query, then mutate the source both ",(0,i.jsx)(n.strong,{children:"before"})," and ",(0,i.jsx)(n.strong,{children:"after"})," calling ",(0,i.jsx)(n.code,{children:"ToList()"}),"; compare outputs."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-summary",children:"\ud83d\udccc Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operator / Concept"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Where"})}),(0,i.jsx)(n.td,{children:"Filter elements"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Select"})}),(0,i.jsx)(n.td,{children:"Transform elements"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"OrderBy/ThenBy"})}),(0,i.jsx)(n.td,{children:"Sort by one or multiple keys"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"OrderByDescending"})}),(0,i.jsx)(n.td,{children:"Sort descending"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"First/FirstOrDefault"})}),(0,i.jsx)(n.td,{children:"Take first (throw vs default)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Last"})}),(0,i.jsx)(n.td,{children:"Take last element"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Single/SingleOrDefault"})}),(0,i.jsx)(n.td,{children:"Enforce exactly one (or zero/one) element"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Any/All"})}),(0,i.jsx)(n.td,{children:"Existential / universal checks"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Contains"})}),(0,i.jsx)(n.td,{children:"Membership test"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Distinct"})}),(0,i.jsx)(n.td,{children:"Remove duplicates"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Take/Skip"})}),(0,i.jsx)(n.td,{children:"Paging"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"SelectMany"})}),(0,i.jsx)(n.td,{children:"Flatten nested sequences"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GroupBy"})}),(0,i.jsx)(n.td,{children:"Group elements by a key"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Aggregates"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"Count"}),", ",(0,i.jsx)(n.code,{children:"Sum"}),", ",(0,i.jsx)(n.code,{children:"Average"}),", ",(0,i.jsx)(n.code,{children:"Min"}),", ",(0,i.jsx)(n.code,{children:"Max"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Deferred Execution"}),(0,i.jsx)(n.td,{children:"Execution happens on enumeration"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);