"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[3088],{3885:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Contents/Session1/Classes-constructors-properties-inheritance/Inheritance","title":"Inheritance","description":"After seeing how repetitive code becomes a problem,","source":"@site/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/04-Inheritance.md","sourceDirName":"Contents/Session1/04-Classes-constructors-properties-inheritance","slug":"/Contents/Session1/Classes-constructors-properties-inheritance/Inheritance","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Inheritance","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/blob/main/docs/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/04-Inheritance.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Inheritance","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"What is OOP","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/what-is-OOP"},"next":{"title":"Polymorphism","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Polymorphism"}}');var i=n(4848),o=n(8453);const t={title:"Inheritance",sidebar_position:4},c="\ud83c\udf3f Inheritance in C#",l={},d=[{value:"\ud83e\udde0 What is Inheritance?",id:"-what-is-inheritance",level:2},{value:"\ud83c\udf33 Real Example: Tree System",id:"-real-example-tree-system",level:3},{value:"\ud83e\udde9 Method Customization with <code>virtual</code> and <code>override</code>",id:"-method-customization-with-virtual-and-override",level:2},{value:"\ud83e\uddea Code Comparison",id:"-code-comparison",level:3},{value:"\ud83d\udca1 Answer 1: Removing <code>override</code> in the subclass",id:"-answer-1-removing-override-in-the-subclass",level:3},{value:"\ud83d\udca1 Answer 2: Calling the superclass method",id:"-answer-2-calling-the-superclass-method",level:3},{value:"\ud83d\udd10 Using <code>protected</code> for Inheritance",id:"-using-protected-for-inheritance",level:2},{value:"\ud83c\udfd7\ufe0f Calling Superclass Constructors with <code>base()</code>",id:"\ufe0f-calling-superclass-constructors-with-base",level:2},{value:"\ud83d\udcd8 Example: Tree with Constructor",id:"-example-tree-with-constructor",level:3},{value:"\ud83e\uddfc Clean Code Tips for Inheritance",id:"-clean-code-tips-for-inheritance",level:2},{value:"\u2705 Prefer Composition Over Inheritance \u2014 When Appropriate",id:"-prefer-composition-over-inheritance--when-appropriate",level:3},{value:"\u2705 Avoid Deep Inheritance Trees",id:"-avoid-deep-inheritance-trees",level:3},{value:"\u2705 Don\u2019t Override Just to Change One Line",id:"-dont-override-just-to-change-one-line",level:3},{value:"\u2705 Avoid Calling Virtual Methods from Constructors",id:"-avoid-calling-virtual-methods-from-constructors",level:3},{value:"\u2705 Use <code>protected</code> with Care",id:"-use-protected-with-care",level:3},{value:"\u2705 Name Your Superclasses Clearly",id:"-name-your-superclasses-clearly",level:3}];function a(e){const r={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"-inheritance-in-c",children:"\ud83c\udf3f Inheritance in C#"})}),"\n",(0,i.jsxs)(r.p,{children:["After seeing how repetitive code becomes a problem,",(0,i.jsx)(r.br,{}),"\n","it's time to introduce a better approach: ",(0,i.jsx)(r.strong,{children:"Inheritance"})," \u2014 one of the pillars of OOP."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-what-is-inheritance",children:"\ud83e\udde0 What is Inheritance?"}),"\n",(0,i.jsxs)(r.p,{children:["Inheritance allows a class (called a ",(0,i.jsx)(r.strong,{children:"subclass"}),") to reuse the fields and methods of another class (called the ",(0,i.jsx)(r.strong,{children:"superclass"}),")."]}),"\n",(0,i.jsxs)(r.p,{children:["Instead of repeating common logic in every class, we write it ",(0,i.jsx)(r.strong,{children:"once"})," in the superclass, and all subclasses ",(0,i.jsx)(r.strong,{children:"inherit"})," it."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-real-example-tree-system",children:"\ud83c\udf33 Real Example: Tree System"}),"\n",(0,i.jsxs)(r.p,{children:["All types of trees can ",(0,i.jsx)(r.strong,{children:"photosynthesize"})," and ",(0,i.jsx)(r.strong,{children:"have height"}),", but the way they ",(0,i.jsx)(r.strong,{children:"grow"})," and ",(0,i.jsx)(r.strong,{children:"produce fruit"})," can be different."]}),"\n",(0,i.jsxs)(r.p,{children:["Let\u2019s create a base class called ",(0,i.jsx)(r.code,{children:"Tree"}),", and derive ",(0,i.jsx)(r.code,{children:"AppleTree"}),", ",(0,i.jsx)(r.code,{children:"OliveTree"}),", and ",(0,i.jsx)(r.code,{children:"PineTree"})," from it."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class Tree\r\n{\r\n    protected int Height = 0;\r\n\r\n    public void Photosynthesize()\r\n    {\r\n        Console.WriteLine("Tree is photosynthesizing \ud83c\udf1e");\r\n    }\r\n\r\n    public virtual void Grow()\r\n    {\r\n        Console.WriteLine("Generic tree is growing \ud83c\udf31");\r\n    }\r\n\r\n    public virtual void ProduceFruit()\r\n    {\r\n        Console.WriteLine("Generic fruit produced.");\r\n    }\r\n\r\n    protected void ReportHeight()\r\n    {\r\n        Console.WriteLine($"Tree height is {Height} meters.");\r\n    }\r\n}\r\npublic class AppleTree : Tree\r\n{\r\n    public override void Grow()\r\n    {\r\n        Height += 2;\r\n        Console.WriteLine("Apple tree grew by 2 meters.");\r\n        ReportHeight();\r\n    }\r\n\r\n    public override void ProduceFruit()\r\n    {\r\n        Console.WriteLine("Produced delicious apples \ud83c\udf4e");\r\n    }\r\n}\r\npublic class OliveTree : Tree\r\n{\r\n    public override void Grow()\r\n    {\r\n        Height += 1;\r\n        Console.WriteLine("Olive tree grew by 1 meter.");\r\n        ReportHeight();\r\n    }\r\n\r\n    public override void ProduceFruit()\r\n    {\r\n        Console.WriteLine("Produced rich olives \ud83e\uded2");\r\n    }\r\n}\r\npublic class PineTree : Tree\r\n{\r\n    public override void Grow()\r\n    {\r\n        Height += 3;\r\n        Console.WriteLine("Pine tree grew by 3 meters.");\r\n        ReportHeight();\r\n    }\r\n\r\n    public override void ProduceFruit()\r\n    {\r\n        Console.WriteLine("Produced pine cones \ud83c\udf32");\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(r.h2,{id:"-method-customization-with-virtual-and-override",children:["\ud83e\udde9 Method Customization with ",(0,i.jsx)(r.code,{children:"virtual"})," and ",(0,i.jsx)(r.code,{children:"override"})]}),"\n",(0,i.jsxs)(r.p,{children:["In object-oriented programming, a ",(0,i.jsx)(r.strong,{children:"superclass"})," can provide a ",(0,i.jsx)(r.strong,{children:"default version"})," of a method using the ",(0,i.jsx)(r.code,{children:"virtual"})," keyword.\r\nSubclasses can then use the ",(0,i.jsx)(r.code,{children:"override"})," keyword to ",(0,i.jsx)(r.strong,{children:"customize"})," that method\u2019s behavior."]}),"\n",(0,i.jsx)(r.p,{children:"This allows us to:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Keep shared structure and naming"}),"\n",(0,i.jsx)(r.li,{children:"Change only what\u2019s unique in each subclass"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"-code-comparison",children:"\ud83e\uddea Code Comparison"}),"\n",(0,i.jsxs)(r.p,{children:["Let\u2019s say every tree grows, but each one grows at a different rate.",(0,i.jsx)(r.br,{}),"\n","We define a ",(0,i.jsx)(r.code,{children:"virtual"})," method in the superclass, and then ",(0,i.jsx)(r.code,{children:"override"})," it in each subclass.\r\nThis way, we avoid writing completely separate ",(0,i.jsx)(r.code,{children:"Grow()"})," methods from scratch."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class Tree\r\n{\r\n    protected int Height = 0;\r\n\r\n    public virtual void Grow()\r\n    {\r\n        Console.WriteLine("Generic tree is growing slowly.");\r\n    }\r\n}\r\npublic class AppleTree : Tree\r\n{\r\n    public override void Grow()\r\n    {\r\n        Height += 2;\r\n        Console.WriteLine("Apple tree is growing faster! \ud83c\udf4e");\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(r.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["What would happen if we removed ",(0,i.jsx)(r.code,{children:"override"})," in the subclass?"]}),"\n",(0,i.jsx)(r.li,{children:"Can you call the superclass method inside the overridden one?"}),"\n"]}),"\n",(0,i.jsxs)(r.h3,{id:"-answer-1-removing-override-in-the-subclass",children:["\ud83d\udca1 Answer 1: Removing ",(0,i.jsx)(r.code,{children:"override"})," in the subclass"]}),"\n",(0,i.jsxs)(r.p,{children:["If you remove ",(0,i.jsx)(r.code,{children:"override"})," in the subclass and try to define the same method, you are actually hiding the base method \u2014 not overriding it. This can lead to confusion and unexpected behavior (no polymorphism)."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class Tree\r\n{\r\n    public virtual void Grow()\r\n    {\r\n        Console.WriteLine("Generic tree is growing.");\r\n    }\r\n}\r\n\r\npublic class AppleTree : Tree\r\n{\r\n    // Missing \'override\' \u2014 this is NOT overriding\r\n    public void Grow()\r\n    {\r\n        Console.WriteLine("Apple tree is growing.");\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-answer-2-calling-the-superclass-method",children:"\ud83d\udca1 Answer 2: Calling the superclass method"}),"\n",(0,i.jsxs)(r.p,{children:["Yes! You can call the superclass version of a method from within the overridden method using the ",(0,i.jsx)(r.code,{children:"base"})," keyword.\r\nThis is useful when you want to ",(0,i.jsx)(r.strong,{children:"extend"})," the behavior rather than replace it."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class Tree\r\n{\r\n    public virtual void Grow()\r\n    {\r\n        Console.WriteLine("Generic tree is growing.");\r\n    }\r\n}\r\n\r\npublic class AppleTree : Tree\r\n{\r\n    // Missing \'override\' \u2014 this is NOT overriding\r\n    public void Grow()\r\n    {\r\n        Console.WriteLine("Apple tree is growing.");\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.h2,{id:"-using-protected-for-inheritance",children:["\ud83d\udd10 Using ",(0,i.jsx)(r.code,{children:"protected"})," for Inheritance"]}),"\n",(0,i.jsxs)(r.p,{children:["We\u2019ve seen ",(0,i.jsx)(r.code,{children:"public"})," and ",(0,i.jsx)(r.code,{children:"private"}),", but what about ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"protected"})}),"?"]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(r.code,{children:"protected"})," field or method is:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"\u274c Not accessible from outside the class"}),"\n",(0,i.jsx)(r.li,{children:"\u2705 But available to subclasses"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["This is perfect when you want to ",(0,i.jsx)(r.strong,{children:"hide something from the outside"}),", but still allow subclasses to use it."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'// Inside Tree class\r\nprotected int Height;\r\nprotected void ReportHeight()\r\n{\r\n    Console.WriteLine($"Tree height: {Height} meters");\r\n}\r\n\r\n// Inside child class\r\npublic override void Grow()\r\n{\r\n    Height += 2;\r\n    ReportHeight(); // allowed because it\'s protected\r\n}\r\n\n'})}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(r.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["How is ",(0,i.jsx)(r.code,{children:"protected"})," different from ",(0,i.jsx)(r.code,{children:"private"})," and ",(0,i.jsx)(r.code,{children:"public"}),"?"]}),"\n",(0,i.jsxs)(r.li,{children:["Why might a ",(0,i.jsx)(r.code,{children:"Tree"})," want to keep ",(0,i.jsx)(r.code,{children:"Height"})," protected instead of public?"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(r.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Create a new ",(0,i.jsx)(r.code,{children:"CherryTree"})," class that inherits from the ",(0,i.jsx)(r.code,{children:"Tree"})," superclass"]}),"\n",(0,i.jsxs)(r.li,{children:["Use ",(0,i.jsx)(r.code,{children:"override"})," to customize ",(0,i.jsx)(r.code,{children:"Grow()"})," and ",(0,i.jsx)(r.code,{children:"ProduceFruit()"})]}),"\n",(0,i.jsxs)(r.li,{children:["Try using a ",(0,i.jsx)(r.code,{children:"protected"})," field in the superclass"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.h2,{id:"\ufe0f-calling-superclass-constructors-with-base",children:["\ud83c\udfd7\ufe0f Calling Superclass Constructors with ",(0,i.jsx)(r.code,{children:"base()"})]}),"\n",(0,i.jsxs)(r.p,{children:["Sometimes, your ",(0,i.jsx)(r.strong,{children:"superclass has a constructor"})," that takes arguments \u2014 maybe it needs to initialize fields like ",(0,i.jsx)(r.code,{children:"Name"}),", ",(0,i.jsx)(r.code,{children:"Height"}),", or ",(0,i.jsx)(r.code,{children:"Age"}),".\r\nTo pass values from the subclass constructor to the superclass constructor,",(0,i.jsx)(r.br,{}),"\n","use the ",(0,i.jsx)(r.code,{children:"base(...)"})," keyword."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-example-tree-with-constructor",children:"\ud83d\udcd8 Example: Tree with Constructor"}),"\n",(0,i.jsxs)(r.p,{children:["Let\u2019s say we want every tree to have a ",(0,i.jsx)(r.strong,{children:"name"})," and a ",(0,i.jsx)(r.strong,{children:"starting height"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"We define a constructor in the superclass like this:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"public class Tree\r\n{\r\n    public string Name { get; }\r\n    public int Height { get; }\r\n\r\n    public Tree(string name, int height)\r\n    {\r\n        Name = name;\r\n        Height = height;\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Then, in the subclass, we use ",(0,i.jsx)(r.code,{children:"base(...)"})," to ",(0,i.jsx)(r.strong,{children:"forward values"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class AppleTree : Tree\r\n{\r\n    public AppleTree() : base("Apple Tree", 2)\r\n    {\r\n        // Additional logic if needed\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(r.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["What happens if the superclass has no parameterless constructor, but the subclass doesn't call ",(0,i.jsx)(r.code,{children:"base(...)"}),"?"]}),"\n",(0,i.jsx)(r.li,{children:"Can we mix custom logic in subclass constructors with base logic?"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(r.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Add a constructor to ",(0,i.jsx)(r.code,{children:"Tree"})," that takes a ",(0,i.jsx)(r.code,{children:"string name"})," and ",(0,i.jsx)(r.code,{children:"int height"})]}),"\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.code,{children:"AppleTree"}),", use ",(0,i.jsx)(r.code,{children:"base(...)"}),' to pass "Apple Tree" and 2']}),"\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.code,{children:"PineTree"}),", use ",(0,i.jsx)(r.code,{children:"base(...)"}),' to pass "Pine Tree" and 3']}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-clean-code-tips-for-inheritance",children:"\ud83e\uddfc Clean Code Tips for Inheritance"}),"\n",(0,i.jsxs)(r.p,{children:["While inheritance is powerful, misusing it can lead to ",(0,i.jsx)(r.strong,{children:"tight coupling"}),", ",(0,i.jsx)(r.strong,{children:"fragile design"}),", and ",(0,i.jsx)(r.strong,{children:"unmaintainable code"}),".",(0,i.jsx)(r.br,{}),"\n","Here are some clean code principles to help you write ",(0,i.jsx)(r.strong,{children:"safe and scalable inheritance hierarchies"}),":"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-prefer-composition-over-inheritance--when-appropriate",children:"\u2705 Prefer Composition Over Inheritance \u2014 When Appropriate"}),"\n",(0,i.jsx)(r.p,{children:"Before using inheritance, ask yourself:"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:['"Is this a ',(0,i.jsx)(r.strong,{children:"\u201cis-a\u201d"})," relationship or a ",(0,i.jsx)(r.strong,{children:"\u201chas-a\u201d"}),' relationship?"']}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["\u2705 Use inheritance if ",(0,i.jsx)(r.code,{children:"AppleTree"})," ",(0,i.jsx)(r.strong,{children:"is a"})," ",(0,i.jsx)(r.code,{children:"Tree"}),(0,i.jsx)(r.br,{}),"\n","\u2705 Use composition if ",(0,i.jsx)(r.code,{children:"Tree"})," ",(0,i.jsx)(r.strong,{children:"has a"})," ",(0,i.jsx)(r.code,{children:"Logger"})]}),"\n",(0,i.jsxs)(r.p,{children:["If it's not a real ",(0,i.jsx)(r.strong,{children:"type of"})," relationship, use composition."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-avoid-deep-inheritance-trees",children:"\u2705 Avoid Deep Inheritance Trees"}),"\n",(0,i.jsxs)(r.p,{children:["Try to keep your inheritance structure ",(0,i.jsx)(r.strong,{children:"shallow"})," \u2014 ideally ",(0,i.jsx)(r.strong,{children:"1\u20132 levels"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83e\udde0 Deep hierarchies make the code harder to read and debug.",(0,i.jsx)(r.br,{}),"\n","Changes in the superclass may unexpectedly break subclasses."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-dont-override-just-to-change-one-line",children:"\u2705 Don\u2019t Override Just to Change One Line"}),"\n",(0,i.jsxs)(r.p,{children:["If you find yourself overriding a method just to slightly change something, it's a sign the method is ",(0,i.jsx)(r.strong,{children:"doing too much"})," or needs to be ",(0,i.jsx)(r.strong,{children:"broken down"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["\u2705 Split the method into smaller pieces",(0,i.jsx)(r.br,{}),"\n","\u2705 Extract common logic to helper methods"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-avoid-calling-virtual-methods-from-constructors",children:"\u2705 Avoid Calling Virtual Methods from Constructors"}),"\n",(0,i.jsxs)(r.p,{children:["Calling ",(0,i.jsx)(r.code,{children:"virtual"})," or ",(0,i.jsx)(r.code,{children:"override"})," methods from a superclass constructor is dangerous \u2014 because the subclass is ",(0,i.jsx)(r.strong,{children:"not fully constructed yet"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"\ud83d\udd12 You might accidentally call a method that depends on uninitialized fields."}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.h3,{id:"-use-protected-with-care",children:["\u2705 Use ",(0,i.jsx)(r.code,{children:"protected"})," with Care"]}),"\n",(0,i.jsxs)(r.p,{children:["While ",(0,i.jsx)(r.code,{children:"protected"})," is helpful for subclasses, exposing too much internal state makes classes tightly coupled."]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["\ud83e\udde0 Use ",(0,i.jsx)(r.code,{children:"private"})," by default \u2192 only use ",(0,i.jsx)(r.code,{children:"protected"})," when necessary"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-name-your-superclasses-clearly",children:"\u2705 Name Your Superclasses Clearly"}),"\n",(0,i.jsxs)(r.p,{children:["Avoid vague names like ",(0,i.jsx)(r.code,{children:"BaseClass"})," or ",(0,i.jsx)(r.code,{children:"MyBase"}),".",(0,i.jsx)(r.br,{}),"\n","Use meaningful names that reflect shared behavior."]}),"\n",(0,i.jsxs)(r.p,{children:["\u2705 Prefer: ",(0,i.jsx)(r.code,{children:"Tree"}),", ",(0,i.jsx)(r.code,{children:"Animal"}),", ",(0,i.jsx)(r.code,{children:"Vehicle"}),", ",(0,i.jsx)(r.code,{children:"Shape"}),(0,i.jsx)(r.br,{}),"\n","\u274c Avoid: ",(0,i.jsx)(r.code,{children:"BaseComponent"}),", ",(0,i.jsx)(r.code,{children:"BaseObject"}),", ",(0,i.jsx)(r.code,{children:"CommonClass"})]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(r.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Have you seen real-world cases where misuse of inheritance caused problems?"}),"\n",(0,i.jsxs)(r.li,{children:["Why is ",(0,i.jsx)(r.code,{children:"protected"})," more dangerous than ",(0,i.jsx)(r.code,{children:"private"}),"?"]}),"\n",(0,i.jsx)(r.li,{children:"Can you think of a better way to reuse logic without inheritance?"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(r.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Review your subclass structure.",(0,i.jsx)(r.br,{}),"\n","Are you overriding methods you don\u2019t really need to?"]}),"\n",(0,i.jsx)(r.li,{children:"Can any logic be extracted into a helper class instead of a superclass?"}),"\n",(0,i.jsxs)(r.li,{children:["Check if any ",(0,i.jsx)(r.code,{children:"protected"})," fields can be safely made ",(0,i.jsx)(r.code,{children:"private"})," or refactored."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>c});var s=n(6540);const i={},o=s.createContext(i);function t(e){const r=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);