"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[8943],{8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var r=n(6540);const i={},t=r.createContext(i);function l(e){const s=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:s},e.children)}},9494:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Contents/Session1/Classes-constructors-properties-inheritance/classes-and-objects","title":"Classes and Objects","description":"Classes are the blueprints for creating objects.","source":"@site/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/01-classes-and-objects.md","sourceDirName":"Contents/Session1/04-Classes-constructors-properties-inheritance","slug":"/Contents/Session1/Classes-constructors-properties-inheritance/classes-and-objects","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/classes-and-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/blob/main/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/01-classes-and-objects.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Classes and Objects","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Classes constructors properties inheritance","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/category/classes-constructors-properties-inheritance"},"next":{"title":"Constructors and Properties","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Constructors-and-Properties"}}');var i=n(4848),t=n(8453);const l={title:"Classes and Objects",sidebar_position:1},o="\ud83e\uddf1 Classes and Objects in C#",a={},c=[{value:"\ud83e\udde0 Why Use Classes?",id:"-why-use-classes",level:2},{value:"\ud83e\udde0 Real-Life Analogy",id:"-real-life-analogy",level:2},{value:"\ud83d\uddbc\ufe0f Think of a drawing of a tree.",id:"\ufe0f-think-of-a-drawing-of-a-tree",level:3},{value:"\ud83e\udde9 Defining Methods Inside Classes",id:"-defining-methods-inside-classes",level:2}];function d(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"-classes-and-objects-in-c",children:"\ud83e\uddf1 Classes and Objects in C#"})}),"\n",(0,i.jsxs)(s.p,{children:["Classes are the ",(0,i.jsx)(s.strong,{children:"blueprints"})," for creating objects.",(0,i.jsx)(s.br,{}),"\n","They help us model real-world entities using ",(0,i.jsx)(s.strong,{children:"data (fields/properties)"})," and ",(0,i.jsx)(s.strong,{children:"behavior (methods)"}),"."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"-why-use-classes",children:"\ud83e\udde0 Why Use Classes?"}),"\n",(0,i.jsxs)(s.p,{children:["Let\u2019s say you want to model a car.",(0,i.jsx)(s.br,{}),"\n","Instead of writing variables like this:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'string carBrand = "Toyota";\r\nstring carColor = "Red";\r\nint carSpeed = 120;\n'})}),"\n",(0,i.jsx)(s.p,{children:"You can group related data and logic using a class:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"class Car\r\n{\r\n    public string Brand;\r\n    public string Color;\r\n    public int Speed;\r\n}\n"})}),"\n",(0,i.jsx)(s.p,{children:"Then you create an object (instance) of the class:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'Car myCar = new Car();\r\nmyCar.Brand = "Toyota";\r\nmyCar.Color = "Red";\r\nmyCar.Speed = 120;\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Now ",(0,i.jsx)(s.code,{children:"myCar"})," is a real object in memory based on the blueprint ",(0,i.jsx)(s.code,{children:"Car"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(s.strong,{children:"Question for students"}),(0,i.jsx)(s.br,{}),"\n","What is the difference between a class and an object? Can you explain it in your own words?"]}),"\n",(0,i.jsxs)(s.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(s.strong,{children:"Practice"}),(0,i.jsx)(s.br,{}),"\n","Create a class called Book with these fields:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"Title"})," (string)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"Author"})," (string)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"Pages"})," (int)"]}),"\n",(0,i.jsx)(s.li,{children:"Then create 2 different books and assign values to their fields."}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"-real-life-analogy",children:"\ud83e\udde0 Real-Life Analogy"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Concept"}),(0,i.jsx)(s.th,{children:"Real-Life Example"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Class"}),(0,i.jsx)(s.td,{children:"Blueprint of a house"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Object"}),(0,i.jsx)(s.td,{children:"A built house based on that blueprint"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Field"}),(0,i.jsx)(s.td,{children:"The rooms, doors, and windows of the house"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Method"}),(0,i.jsx)(s.td,{children:"What the house can do (e.g. open a door)"})]})]})]}),"\n",(0,i.jsx)(s.p,{children:"This analogy helps us understand how classes define a structure, while objects are real things we can use in code."}),"\n",(0,i.jsx)(s.h3,{id:"\ufe0f-think-of-a-drawing-of-a-tree",children:"\ud83d\uddbc\ufe0f Think of a drawing of a tree."}),"\n",(0,i.jsxs)(s.p,{children:["It shows ",(0,i.jsx)(s.strong,{children:"branches, leaves, roots, and fruits"})," \u2014 but it's just a drawing.That drawing is like a ",(0,i.jsx)(s.strong,{children:"class"})," \u2014 it defines the structure of a tree."]}),"\n",(0,i.jsxs)(s.p,{children:["But you can\u2019t eat a fruit from a picture! \ud83c\udf4e",(0,i.jsx)(s.br,{}),"\n","To actually use the tree \u2014 to ",(0,i.jsx)(s.strong,{children:"pick its fruit"}),", ",(0,i.jsx)(s.strong,{children:"watch it grow"}),", or ",(0,i.jsx)(s.strong,{children:"interact with it"})," \u2014",(0,i.jsx)(s.br,{}),"\n","you need to ",(0,i.jsx)(s.strong,{children:"plant and grow a real one"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["That real, living tree is the ",(0,i.jsx)(s.strong,{children:"object"})," \u2014 an instance created from the blueprint."]}),"\n",(0,i.jsx)(s.p,{children:"Just like in programming:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["A ",(0,i.jsx)(s.strong,{children:"class"})," describes what something ",(0,i.jsx)(s.em,{children:"could be"})]}),"\n",(0,i.jsxs)(s.li,{children:["An ",(0,i.jsx)(s.strong,{children:"object"})," is the real thing you can use"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"-defining-methods-inside-classes",children:"\ud83e\udde9 Defining Methods Inside Classes"}),"\n",(0,i.jsxs)(s.p,{children:["A class can also include ",(0,i.jsx)(s.strong,{children:"methods"}),", which define the behavior or actions of an object."]}),"\n",(0,i.jsxs)(s.p,{children:["For example, a ",(0,i.jsx)(s.code,{children:"Car"})," class might have a method called ",(0,i.jsx)(s.code,{children:"Honk()"})," that prints ",(0,i.jsx)(s.code,{children:'"Beep beep!"'}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["We define methods ",(0,i.jsx)(s.em,{children:"inside"})," the class, and we ",(0,i.jsx)(s.em,{children:"call"})," them using the object."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'class Car\r\n{\r\n    public string Brand;\r\n    public int Speed;\r\n\r\n    public void Honk()\r\n    {\r\n        Console.WriteLine("Beep beep!");\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(s.p,{children:"To call the method:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"Car myCar = new Car();\r\nmyCar.Honk();\n"})}),"\n",(0,i.jsxs)(s.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(s.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Can a class have both ",(0,i.jsx)(s.strong,{children:"fields"})," and ",(0,i.jsx)(s.strong,{children:"methods"}),"?"]}),"\n",(0,i.jsx)(s.li,{children:"What\u2019s the difference between them?"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(s.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(s.p,{children:["Extend your ",(0,i.jsx)(s.code,{children:"Book"})," class:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Add a method called ",(0,i.jsx)(s.code,{children:"DisplayInfo()"})]}),"\n",(0,i.jsxs)(s.li,{children:["It should print: ",(0,i.jsx)(s.code,{children:"Title: <title>, Author: <author>, Pages: <pages>"})]}),"\n",(0,i.jsxs)(s.li,{children:["Create a few ",(0,i.jsx)(s.code,{children:"Book"})," objects and call ",(0,i.jsx)(s.code,{children:"DisplayInfo()"})," for each one"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.p,{children:["Let\u2019s continue with the ",(0,i.jsx)(s.strong,{children:"Tree"})," example:"]}),"\n",(0,i.jsx)(s.p,{children:"You might define a class like this:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'class Tree\r\n{\r\n    public string FruitType;\r\n    public int Height;\r\n    public int LeafCount;\r\n\r\n    public void Grow()\r\n    {\r\n        Height++;\r\n        Console.WriteLine("The tree grew taller!");\r\n    }\r\n\r\n    public void DropLeaves()\r\n    {\r\n        LeafCount = 0;\r\n        Console.WriteLine("All leaves dropped.");\r\n    }\r\n\r\n    public void ProduceFruit()\r\n    {\r\n        Console.WriteLine($"Producing delicious {FruitType} \ud83c\udf4e");\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(s.p,{children:["That means every tree (object) based on this class can ",(0,i.jsx)(s.strong,{children:"grow"}),", ",(0,i.jsx)(s.strong,{children:"drop its leaves"}),", or ",(0,i.jsx)(s.strong,{children:"produce fruit"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"Think of it like this:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"Tree appleTree = new Tree();\r\nappleTree.Grow();\r\nappleTree.ProduceFruit();\n"})}),"\n",(0,i.jsxs)(s.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(s.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"What actions would you add to a Tree class?"}),"\n",(0,i.jsx)(s.li,{children:"Are those actions shared across all types of trees?"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(s.strong,{children:"Practice"})]}),"\n",(0,i.jsx)(s.p,{children:"Design a Tree class that includes:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["At least two fields (e.g. ",(0,i.jsx)(s.code,{children:"Type"}),", ",(0,i.jsx)(s.code,{children:"Height"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:["A method called ",(0,i.jsx)(s.code,{children:"DisplayInfo()"})," that prints tree details"]}),"\n",(0,i.jsx)(s.li,{children:"A method called Grow() that increases the height by 1 meter each time it's called"}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);