"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[7599],{423:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Contents/Session3/REST","title":"REST","description":"Why it exists, what it solves.","source":"@site/docs/Contents/Session3/02-REST.md","sourceDirName":"Contents/Session3","slug":"/Contents/Session3/REST","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session3/REST","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/blob/main/docs/docs/Contents/Session3/02-REST.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"REST"},"sidebar":"tutorialSidebar","previous":{"title":"Dependency Injection (DI) and Inversion of Control (IoC)","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session3/DI-and-IOC"},"next":{"title":"Full Course Outline","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Information/course-outline"}}');var s=r(4848),i=r(8453);const o={title:"REST"},d=void 0,c={},l=[{value:"\ud83d\udd39REST \u2014 the problem it solves (and how APIs looked before it)",id:"rest--the-problem-it-solves-and-how-apis-looked-before-it",level:2},{value:"\ud83d\udd39REST essentials (quick principles)",id:"rest-essentials-quick-principles",level:2},{value:"\ud83d\udd39HTTP methods (CRUD mapping) and typical status codes",id:"http-methods-crud-mapping-and-typical-status-codes",level:2},{value:"\ud83d\udd39Anti-patterns to avoid",id:"anti-patterns-to-avoid",level:2},{value:"\ud83d\udd39End-to-end example: Product REST API (all verbs + status codes)",id:"end-to-end-example-product-rest-api-all-verbs--status-codes",level:2},{value:"1) Domain model &amp; DTOs",id:"1-domain-model--dtos",level:3},{value:"2) Repository abstraction (to keep controller thin)",id:"2-repository-abstraction-to-keep-controller-thin",level:3},{value:"3) Registration (DI) in Program.cs",id:"3-registration-di-in-programcs",level:3},{value:"4) Controller with full REST semantics",id:"4-controller-with-full-rest-semantics",level:3}];function a(e){const n={blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Why it exists, what it solves."}),"\n",(0,s.jsx)(n.h2,{id:"rest--the-problem-it-solves-and-how-apis-looked-before-it",children:"\ud83d\udd39REST \u2014 the problem it solves (and how APIs looked before it)"}),"\n",(0,s.jsx)(n.p,{children:"Before REST was popular, two common ways to build APIs were:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Ad-hoc RPC-style endpoints"})," (custom URLs & verbs):",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"/CreateProduct"}),", ",(0,s.jsx)(n.code,{children:"/UpdateProduct"}),", ",(0,s.jsx)(n.code,{children:"/DeleteProductById"})," \u2013 each one with its own payload format and error handling."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u274c Ambiguous semantics (which status code is \u201csuccess\u201d? 200? 202?)"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Tight coupling between client & server (custom shapes, brittle contracts)"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Hard to cache, hard to scale, hard to document consistently"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"SOAP/XML-RPC"})," (formal but heavy):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Strong tooling and contracts (WSDL)"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Verbose payloads (XML), complex standards, harder to consume on the web, limited cache-friendliness"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"REST"})," (Representational State Transfer) addressed these problems by using the ",(0,s.jsx)(n.strong,{children:"web\u2019s native primitives"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resources"})," modeled as ",(0,s.jsx)(n.strong,{children:"nouns"})," (e.g., ",(0,s.jsx)(n.code,{children:"/products"}),"), not actions."]}),"\n",(0,s.jsxs)(n.li,{children:["Standard ",(0,s.jsx)(n.strong,{children:"HTTP methods"})," (GET, POST, PUT, PATCH, DELETE) to express intent."]}),"\n",(0,s.jsxs)(n.li,{children:["Meaningful ",(0,s.jsx)(n.strong,{children:"HTTP status codes"})," to signal results uniformly."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stateless"})," requests and cache-friendly design."]}),"\n",(0,s.jsx)(n.li,{children:"Uniform interface \u2192 simpler, consistent, evolvable APIs."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Result: ",(0,s.jsx)(n.strong,{children:"loose coupling"}),", ",(0,s.jsx)(n.strong,{children:"predictability"}),", ",(0,s.jsx)(n.strong,{children:"interoperability"}),", and ",(0,s.jsx)(n.strong,{children:"scalability"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"rest-essentials-quick-principles",children:"\ud83d\udd39REST essentials (quick principles)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource-oriented"}),": ",(0,s.jsx)(n.code,{children:"/products"}),", ",(0,s.jsx)(n.code,{children:"/products/{id}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stateless"}),": each request carries enough info to be processed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Uniform interface"}),": standard verbs, media types (JSON), status codes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cacheable"}),": leverage HTTP caching when applicable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Layered system"}),": proxies, gateways, CDNs can sit in the middle"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"http-methods-crud-mapping-and-typical-status-codes",children:"\ud83d\udd39HTTP methods (CRUD mapping) and typical status codes"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Method"}),(0,s.jsx)(n.th,{children:"Intent"}),(0,s.jsx)(n.th,{children:"Typical success codes"}),(0,s.jsx)(n.th,{children:"Notes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"Read a resource/collection"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"200 OK"})," (body)"]}),(0,s.jsx)(n.td,{children:"Must not change server state"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"Create a new resource"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"201 Created"})," + ",(0,s.jsx)(n.code,{children:"Location"})," header"]}),(0,s.jsx)(n.td,{children:"Body usually returns the created resource"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PUT"}),(0,s.jsx)(n.td,{children:"Replace a resource entirely"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"200 OK"})," (body) or ",(0,s.jsx)(n.code,{children:"204 No Content"})]}),(0,s.jsx)(n.td,{children:"Idempotent (same call \u2192 same result)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PATCH"}),(0,s.jsx)(n.td,{children:"Partially update a resource"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"200 OK"})," or ",(0,s.jsx)(n.code,{children:"204 No Content"})]}),(0,s.jsx)(n.td,{children:"Not necessarily idempotent; send only changes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DELETE"}),(0,s.jsx)(n.td,{children:"Remove a resource"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"204 No Content"})}),(0,s.jsx)(n.td,{children:"Idempotent (repeat is safe)"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common error codes"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"400 Bad Request"})," (malformed input), ",(0,s.jsx)(n.code,{children:"401 Unauthorized"}),", ",(0,s.jsx)(n.code,{children:"403 Forbidden"}),", ",(0,s.jsx)(n.code,{children:"404 Not Found"}),", ",(0,s.jsx)(n.code,{children:"409 Conflict"})," (constraint clash), ",(0,s.jsx)(n.code,{children:"422 Unprocessable Entity"})," (validation), ",(0,s.jsx)(n.code,{children:"500"}),"/",(0,s.jsx)(n.code,{children:"503"})," (server side)"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"anti-patterns-to-avoid",children:"\ud83d\udd39Anti-patterns to avoid"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u274c Verb-based URLs: ",(0,s.jsx)(n.code,{children:"/createProduct"}),", ",(0,s.jsx)(n.code,{children:"/deleteProduct?id=1"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u274c Always returning ",(0,s.jsx)(n.code,{children:"200 OK"})," for everything"]}),"\n",(0,s.jsx)(n.li,{children:"\u274c Mixing transport errors with domain errors (e.g., using 500 for validation)"}),"\n",(0,s.jsxs)(n.li,{children:["\u274c Hiding newly created resource URL (forgetting the ",(0,s.jsx)(n.code,{children:"Location"})," header on ",(0,s.jsx)(n.code,{children:"201 Created"}),")","\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,s.jsx)(n.strong,{children:"Guilty confession:"})," I have to admit that I\u2019m often guilty of returning ",(0,s.jsx)(n.code,{children:"201 Created"})," without including the ",(0,s.jsx)(n.code,{children:"Location"})," header for the newly created resource."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"end-to-end-example-product-rest-api-all-verbs--status-codes",children:"\ud83d\udd39End-to-end example: Product REST API (all verbs + status codes)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Goal:"})," Show a clean, idiomatic ASP.NET Core Web API for ",(0,s.jsx)(n.code,{children:"/products"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,s.jsx)(n.strong,{children:"Note:"})," The design you see here (such as calling repository logic directly inside the controller or mixing models and DTOs in the same layer) is ",(0,s.jsx)(n.strong,{children:"only for teaching simplicity"}),". In real-world projects this is not a good practice and should be avoided."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"1-domain-model--dtos",children:"1) Domain model & DTOs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class Product\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; } = "";\r\n    public decimal Price { get; set; }\r\n    public bool IsActive { get; set; } = true;\r\n}\r\n\r\npublic class CreateProductDto\r\n{\r\n    public string Name { get; set; } = "";\r\n    public decimal Price { get; set; }\r\n}\r\n\r\npublic class UpdateProductDto   // for PUT (full update)\r\n{\r\n    public string Name { get; set; } = "";\r\n    public decimal Price { get; set; }\r\n    public bool IsActive { get; set; }\r\n}\r\n\r\npublic class PatchProductDto    // for PATCH (partial update)\r\n{\r\n    public string? Name { get; set; }\r\n    public decimal? Price { get; set; }\r\n    public bool? IsActive { get; set; }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-repository-abstraction-to-keep-controller-thin",children:"2) Repository abstraction (to keep controller thin)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public interface IProductRepository\r\n{\r\n    Task<List<Product>> GetAllAsync(CancellationToken ct = default);\r\n    Task<Product?> GetByIdAsync(int id, CancellationToken ct = default);\r\n    Task<Product> AddAsync(Product product, CancellationToken ct = default);\r\n    Task<bool> UpdateAsync(Product product, CancellationToken ct = default);\r\n    Task<bool> DeleteAsync(int id, CancellationToken ct = default);\r\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"For the session demo, an in-memory implementation is enough. Later you\u2019ll swap it with EF Core."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class InMemoryProductRepository : IProductRepository\r\n{\r\n    private readonly List<Product> _store = new();\r\n    private int _nextId = 1;\r\n\r\n    public Task<List<Product>> GetAllAsync(CancellationToken ct = default)\r\n        => Task.FromResult(_store.ToList());\r\n\r\n    public Task<Product?> GetByIdAsync(int id, CancellationToken ct = default)\r\n        => Task.FromResult(_store.FirstOrDefault(p => p.Id == id));\r\n\r\n    public Task<Product> AddAsync(Product product, CancellationToken ct = default)\r\n    {\r\n        product.Id = _nextId++;\r\n        _store.Add(product);\r\n        return Task.FromResult(product);\r\n    }\r\n\r\n    public Task<bool> UpdateAsync(Product product, CancellationToken ct = default)\r\n    {\r\n        var idx = _store.FindIndex(p => p.Id == product.Id);\r\n        if (idx < 0) return Task.FromResult(false);\r\n        _store[idx] = product;\r\n        return Task.FromResult(true);\r\n    }\r\n\r\n    public Task<bool> DeleteAsync(int id, CancellationToken ct = default)\r\n    {\r\n        var p = _store.FirstOrDefault(x => x.Id == id);\r\n        if (p is null) return Task.FromResult(false);\r\n        _store.Remove(p);\r\n        return Task.FromResult(true);\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-registration-di-in-programcs",children:"3) Registration (DI) in Program.cs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"builder.Services.AddSingleton<IProductRepository, InMemoryProductRepository>();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-controller-with-full-rest-semantics",children:"4) Controller with full REST semantics"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.AspNetCore.Mvc;\r\n\r\n[ApiController]\r\n[Route("products")]\r\npublic  class ProductsController : ControllerBase\r\n{\r\n    private readonly IProductRepository _repo;\r\n\r\n    public ProductsController(IProductRepository repo)\r\n    {\r\n        _repo = repo;\r\n    }\r\n\r\n    // GET /products  \u2192 200 OK (list)\r\n    [HttpGet]\r\n    public async Task<ActionResult<List<Product>>> GetAll(CancellationToken ct)\r\n    {\r\n        var items = await _repo.GetAllAsync(ct);\r\n        return Ok(items); // 200\r\n    }\r\n\r\n    // GET /products/{id} \u2192 200 OK or 404 Not Found\r\n    [HttpGet("{id:int}")]\r\n    public async Task<ActionResult<Product>> GetById(int id, CancellationToken ct)\r\n    {\r\n        var item = await _repo.GetByIdAsync(id, ct);\r\n        if (item is null) return NotFound(); // 404\r\n        return Ok(item); // 200\r\n    }\r\n\r\n    // POST /products \u2192 201 Created + Location header\r\n    [HttpPost]\r\n    public async Task<ActionResult<Product>> Create([FromBody] CreateProductDto dto, CancellationToken ct)\r\n    {\r\n        if (string.IsNullOrWhiteSpace(dto.Name) || dto.Price < 0)\r\n            return BadRequest(new { message = "Name is required and Price must be non-negative." }); // 400\r\n\r\n        var product = new Product { Name = dto.Name.Trim(), Price = dto.Price, IsActive = true };\r\n        var created = await _repo.AddAsync(product, ct);\r\n\r\n        // Returns 201, sets Location: /products/{id}, and body contains the resource\r\n        return CreatedAtAction(nameof(GetById), new { id = created.Id }, created);\r\n    }\r\n\r\n    // PUT /products/{id} \u2192 200 OK (body) or 204 No Content, 404 if not found\r\n    [HttpPut("{id:int}")]\r\n    public async Task<IActionResult> Replace(int id, [FromBody] UpdateProductDto dto, CancellationToken ct)\r\n    {\r\n        var existing = await _repo.GetByIdAsync(id, ct);\r\n        if (existing is null) return NotFound(); // 404\r\n\r\n        if (string.IsNullOrWhiteSpace(dto.Name) || dto.Price < 0)\r\n            return BadRequest(new { message = "Name is required and Price must be non-negative." }); // 400\r\n\r\n        existing.Name = dto.Name.Trim();\r\n        existing.Price = dto.Price;\r\n        existing.IsActive = dto.IsActive;\r\n\r\n        var ok = await _repo.UpdateAsync(existing, ct);\r\n        if (!ok) return NotFound(); // race or missing\r\n\r\n        // choose either Ok(existing) or NoContent(). Here we return the updated entity:\r\n        return Ok(existing); // 200\r\n    }\r\n\r\n    // PATCH /products/{id} \u2192 200/204, 404 if not found\r\n    [HttpPatch("{id:int}")]\r\n    public async Task<IActionResult> Patch(int id, [FromBody] PatchProductDto dto, CancellationToken ct)\r\n    {\r\n        var existing = await _repo.GetByIdAsync(id, ct);\r\n        if (existing is null) return NotFound(); // 404\r\n\r\n        if (dto.Name is not null)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(dto.Name))\r\n                return BadRequest(new { message = "Name cannot be empty." }); // 400\r\n            existing.Name = dto.Name.Trim();\r\n        }\r\n\r\n        if (dto.Price is not null)\r\n        {\r\n            if (dto.Price < 0) return BadRequest(new { message = "Price must be non-negative." });\r\n            existing.Price = dto.Price.Value;\r\n        }\r\n\r\n        if (dto.IsActive is not null)\r\n            existing.IsActive = dto.IsActive.Value;\r\n\r\n        var ok = await _repo.UpdateAsync(existing, ct);\r\n        if (!ok) return NotFound();\r\n\r\n        return Ok(existing); // or NoContent()\r\n    }\r\n\r\n    // DELETE /products/{id} \u2192 204 No Content, 404 if not found\r\n    [HttpDelete("{id:int}")]\r\n    public async Task<IActionResult> Delete(int id, CancellationToken ct)\r\n    {\r\n        var deleted = await _repo.DeleteAsync(id, ct);\r\n        if (!deleted) return NotFound(); // 404\r\n        return NoContent(); // 204\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Why these choices?"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"POST \u2192 201 Created + Location"}),": client learns where the new resource lives."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GET/PUT/PATCH/DELETE"})," use ",(0,s.jsx)(n.strong,{children:"resource URLs"})," (",(0,s.jsx)(n.code,{children:"/products/{id}"}),") and standard codes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"BadRequest (400)"})," only for malformed/invalid input; ",(0,s.jsx)(n.strong,{children:"NotFound (404)"})," for missing resource."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NoContent (204)"})," for successful operations with no body (DELETE)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Idempotency"}),": ",(0,s.jsx)(n.code,{children:"PUT"})," & ",(0,s.jsx)(n.code,{children:"DELETE"})," are safe to repeat; ",(0,s.jsx)(n.code,{children:"POST"})," creates once; ",(0,s.jsx)(n.code,{children:"PATCH"})," is partial."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,s.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Why is returning ",(0,s.jsx)(n.code,{children:"201 Created"})," with a ",(0,s.jsx)(n.code,{children:"Location"})," header better than ",(0,s.jsx)(n.code,{children:"200 OK"})," for POST?"]}),"\n",(0,s.jsxs)(n.li,{children:["In what cases would you choose ",(0,s.jsx)(n.code,{children:"PUT"})," vs ",(0,s.jsx)(n.code,{children:"PATCH"}),"? Give concrete examples."]}),"\n",(0,s.jsxs)(n.li,{children:["Which status code fits validation failures best in your API: ",(0,s.jsx)(n.code,{children:"400"})," or ",(0,s.jsx)(n.code,{children:"422"}),"? Why?"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,s.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Create ",(0,s.jsx)(n.code,{children:"Category"})," endpoints mirroring ",(0,s.jsx)(n.code,{children:"Product"})," semantics (full CRUD, proper status codes)."]}),"\n",(0,s.jsxs)(n.li,{children:["Add simple validation rules and make sure wrong inputs return ",(0,s.jsx)(n.code,{children:"400"})," with helpful messages."]}),"\n",(0,s.jsxs)(n.li,{children:["Extend ",(0,s.jsx)(n.code,{children:"GET /products"})," with optional ",(0,s.jsx)(n.code,{children:"?search"}),", ",(0,s.jsx)(n.code,{children:"?minPrice"}),", ",(0,s.jsx)(n.code,{children:"?maxPrice"})," query parameters and keep responses RESTful."]}),"\n",(0,s.jsxs)(n.li,{children:["Try idempotency: call ",(0,s.jsx)(n.code,{children:"PUT"})," and ",(0,s.jsx)(n.code,{children:"DELETE"})," multiple times and observe behavior."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);