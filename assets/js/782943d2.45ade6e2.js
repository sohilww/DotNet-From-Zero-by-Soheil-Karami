"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[8768],{772:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"Contents/Session1/Variables-types/Null-ValueTypes-ReferenceTypes-and-Nullable-Types","title":"Null, Value Types, Reference Types, and Nullable Types","description":"\ud83d\udd39 What is null?","source":"@site/docs/Contents/Session1/01-Variables-types/04-Null-ValueTypes-ReferenceTypes-and-Nullable-Types.md","sourceDirName":"Contents/Session1/01-Variables-types","slug":"/Contents/Session1/Variables-types/Null-ValueTypes-ReferenceTypes-and-Nullable-Types","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Variables-types/Null-ValueTypes-ReferenceTypes-and-Nullable-Types","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/01-Variables-types/04-Null-ValueTypes-ReferenceTypes-and-Nullable-Types.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Null, Value Types, Reference Types, and Nullable Types","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Type Casting and Conversion","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Variables-types/Type-Casting-and-Conversion-"},"next":{"title":"String Manipulation","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Variables-types/String-Manipulation"}}');var r=n(4848),i=n(8453);const t={title:"Null, Value Types, Reference Types, and Nullable Types",sidebar_position:4},a="Null, Value Types, Reference Types, and Nullable Types in C#",c={},d=[{value:"\ud83d\udd39 What is <code>null</code>?",id:"-what-is-null",level:2},{value:"\ud83d\udd39 Value Types vs Reference Types",id:"-value-types-vs-reference-types",level:2},{value:"\ud83d\udd39 The Problem: Value types can&#39;t be null",id:"-the-problem-value-types-cant-be-null",level:2},{value:"\ud83d\udd39 The Solution: Nullable types",id:"-the-solution-nullable-types",level:2},{value:"\u2705 Checking for null values",id:"-checking-for-null-values",level:2},{value:"\ud83d\udd04 Using null-coalescing operator (<code>??</code>)",id:"-using-null-coalescing-operator-",level:2},{value:"\ud83d\udca1 Using <code>?.</code> safely",id:"-using--safely",level:2},{value:"\ud83d\udccc Summary",id:"-summary",level:2}];function o(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"null-value-types-reference-types-and-nullable-types-in-c",children:"Null, Value Types, Reference Types, and Nullable Types in C#"})}),"\n",(0,r.jsxs)(s.h2,{id:"-what-is-null",children:["\ud83d\udd39 What is ",(0,r.jsx)(s.code,{children:"null"}),"?"]}),"\n",(0,r.jsxs)(s.p,{children:["In C#, ",(0,r.jsx)(s.code,{children:"null"})," is a special literal that represents the ",(0,r.jsx)(s.strong,{children:"absence of a value"})," or ",(0,r.jsx)(s.strong,{children:"no reference"}),". It's most commonly used with ",(0,r.jsx)(s.strong,{children:"reference types"}),", such as ",(0,r.jsx)(s.code,{children:"string"}),", ",(0,r.jsx)(s.code,{children:"object"}),", arrays, and custom classes."]}),"\n",(0,r.jsxs)(s.p,{children:["Example: A variable of type ",(0,r.jsx)(s.code,{children:"string"})," can be set to ",(0,r.jsx)(s.code,{children:"null"})," to indicate it doesn\u2019t point to any text."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-value-types-vs-reference-types",children:"\ud83d\udd39 Value Types vs Reference Types"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Feature"}),(0,r.jsx)(s.th,{children:"Value Types"}),(0,r.jsx)(s.th,{children:"Reference Types"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Stored in"}),(0,r.jsx)(s.td,{children:"Stack"}),(0,r.jsx)(s.td,{children:"Heap"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Default behavior"}),(0,r.jsx)(s.td,{children:"Contains actual data"}),(0,r.jsx)(s.td,{children:"Contains reference to data"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Nullability"}),(0,r.jsxs)(s.td,{children:["Cannot be ",(0,r.jsx)(s.code,{children:"null"})," by default"]}),(0,r.jsxs)(s.td,{children:["Can be ",(0,r.jsx)(s.code,{children:"null"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Examples"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"int"}),", ",(0,r.jsx)(s.code,{children:"bool"}),", ",(0,r.jsx)(s.code,{children:"double"}),", ",(0,r.jsx)(s.code,{children:"char"}),", ",(0,r.jsx)(s.code,{children:"DateTime"}),", ",(0,r.jsx)(s.code,{children:"struct"})]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"string"}),", ",(0,r.jsx)(s.code,{children:"object"}),", ",(0,r.jsx)(s.code,{children:"class"}),", ",(0,r.jsx)(s.code,{children:"array"}),", ",(0,r.jsx)(s.code,{children:"delegate"})]})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-the-problem-value-types-cant-be-null",children:"\ud83d\udd39 The Problem: Value types can't be null"}),"\n",(0,r.jsxs)(s.p,{children:["In many real-world cases (e.g. database, forms), you may need to represent a missing or optional value. But value types like ",(0,r.jsx)(s.code,{children:"int"}),", ",(0,r.jsx)(s.code,{children:"bool"}),", or ",(0,r.jsx)(s.code,{children:"DateTime"})," ",(0,r.jsxs)(s.strong,{children:["cannot be assigned ",(0,r.jsx)(s.code,{children:"null"})," by default"]}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"int number = null; // \u274c Compile error\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-the-solution-nullable-types",children:"\ud83d\udd39 The Solution: Nullable types"}),"\n",(0,r.jsxs)(s.p,{children:["C# provides a syntax to make value types ",(0,r.jsx)(s.strong,{children:"nullable"}),", using ",(0,r.jsx)(s.code,{children:"?"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"int? age = null;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This lets you assign either a real value or ",(0,r.jsx)(s.code,{children:"null"})," to a value type."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"age = 25;\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-checking-for-null-values",children:"\u2705 Checking for null values"}),"\n",(0,r.jsx)(s.p,{children:"You can detect whether a nullable variable holds a value:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Using ",(0,r.jsx)(s.code,{children:".HasValue"})]}),"\n",(0,r.jsxs)(s.li,{children:["Using comparison with ",(0,r.jsx)(s.code,{children:"null"})]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'if (age.HasValue)\n{\n    Console.WriteLine($"Age is {age.Value}");\n}\nelse\n{\n    Console.WriteLine("Age is not set.");\n}\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h2,{id:"-using-null-coalescing-operator-",children:["\ud83d\udd04 Using null-coalescing operator (",(0,r.jsx)(s.code,{children:"??"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["If the variable is ",(0,r.jsx)(s.code,{children:"null"}),", you can provide a fallback/default value using ",(0,r.jsx)(s.code,{children:"??"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'int displayAge = age ?? 18;\nConsole.WriteLine($"Display age: {displayAge}");\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h2,{id:"-using--safely",children:["\ud83d\udca1 Using ",(0,r.jsx)(s.code,{children:"?."})," safely"]}),"\n",(0,r.jsx)(s.p,{children:"The null-conditional operator lets you safely access members."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'int? score = null;\nConsole.WriteLine("Score: " + (score?.ToString() ?? "No score"));\n'})}),"\n",(0,r.jsx)(s.h2,{id:"-summary",children:"\ud83d\udccc Summary"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Concept"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})}),(0,r.jsx)(s.td,{children:"Absence of value or reference"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"int"})," vs ",(0,r.jsx)(s.code,{children:"int?"})]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"int"})," can\u2019t be null; ",(0,r.jsx)(s.code,{children:"int?"})," can"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:".HasValue"})}),(0,r.jsx)(s.td,{children:"Returns true if value exists"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:".Value"})}),(0,r.jsx)(s.td,{children:"Gets the value (unsafe if null)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"??"})}),(0,r.jsx)(s.td,{children:"Returns default if null"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"?."})}),(0,r.jsx)(s.td,{children:"Safely access members on possibly-null object"})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>a});var l=n(6540);const r={},i=l.createContext(r);function t(e){const s=l.useContext(i);return l.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),l.createElement(i.Provider,{value:s},e.children)}}}]);