"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[6331],{1685:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Contents/Session2/SOLID-Principles","title":"SOLID Principles","description":"Note: In this course we follow the definitions of SOLID as presented in the \u201cPPP\u201d book (Principles, Patterns, and Practices of C#) rather than the interpretation in Clean Architecture.","source":"@site/docs/Contents/Session2/03-SOLID-Principles.md","sourceDirName":"Contents/Session2","slug":"/Contents/Session2/SOLID-Principles","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session2/SOLID-Principles","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/blob/main/docs/Contents/Session2/03-SOLID-Principles.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"SOLID Principles"},"sidebar":"tutorialSidebar","previous":{"title":"Code Smells Snapshot","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session2/Code-Smells"},"next":{"title":"High\u2011Level Architecture","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session2/High\u2011Level Architecture"}}');var l=i(4848),r=i(8453);const t={title:"SOLID Principles"},o="SOLID Principles",c={},a=[{value:"\ud83d\udd39 S \u2013 Single Responsibility Principle (SRP)",id:"-s--single-responsibility-principle-srp",level:2},{value:"Problem Example",id:"problem-example",level:3},{value:"Refactored (Extract Responsibilities)",id:"refactored-extract-responsibilities",level:3},{value:"\ud83d\udd39 O \u2013 Open/Closed Principle (OCP)",id:"-o--openclosed-principle-ocp",level:2},{value:"Problem Example",id:"problem-example-1",level:3},{value:"Refactored (Strategy Pattern)",id:"refactored-strategy-pattern",level:3},{value:"\ud83d\udd39 L \u2013 Liskov Substitution Principle (LSP)",id:"-l--liskov-substitution-principle-lsp",level:2},{value:"Problem Violation",id:"problem-violation",level:3},{value:"Fix (Favor Composition)",id:"fix-favor-composition",level:3},{value:"\ud83d\udd39 I \u2013 Interface Segregation Principle (ISP)",id:"-i--interface-segregation-principle-isp",level:2},{value:"Problem Example",id:"problem-example-2",level:3},{value:"Refactored (Split Interfaces)",id:"refactored-split-interfaces",level:3},{value:"\ud83d\udd39 D \u2013 Dependency Inversion Principle (DIP)",id:"-d--dependency-inversion-principle-dip",level:2},{value:"Problem Example",id:"problem-example-3",level:3},{value:"Refactored (Depend on Abstraction)",id:"refactored-depend-on-abstraction",level:3},{value:"\ud83e\uddf9 SOLID in Practice",id:"-solid-in-practice",level:2}];function d(e){const n={blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," In this course we follow the definitions of SOLID as presented in the ",(0,l.jsx)(n.strong,{children:"\u201cPPP\u201d book (Principles, Patterns, and Practices of C#)"})," rather than the interpretation in ",(0,l.jsx)(n.em,{children:"Clean Architecture"}),".",(0,l.jsx)(n.br,{}),"\n","The core intent is identical\u2014writing maintainable, extensible code\u2014but terminology and code samples come from the PPP perspective."]}),"\n"]}),"\n",(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"solid-principles",children:"SOLID Principles"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["Five design principles coined by Robert\u202fC.\u202fMartin that make software ",(0,l.jsx)(n.strong,{children:"easier to maintain, extend, and test"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"-s--single-responsibility-principle-srp",children:"\ud83d\udd39 S \u2013 Single Responsibility Principle (SRP)"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"A class should have one, and only one, reason to change."})}),"\n",(0,l.jsx)(n.h3,{id:"problem-example",children:"Problem Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:'public class ReportGenerator\n{\n    public string CreateHtmlReport(IEnumerable<Sale> sales)\n    {\n        // 1) Build HTML\n        var html = $"<h1>Sales ({sales.Count()})</h1>";\n\n        // 2) Save to disk\n        File.WriteAllText("sales.html", html);\n\n        // 3) Email report\n        mail.Send("admin@corp.com", "Daily report", html);\n\n        return html;\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"refactored-extract-responsibilities",children:"Refactored (Extract Responsibilities)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:'public class ReportGenerator        // builds HTML\n{\n    public string BuildHtml(IEnumerable<Sale> sales) => $"<h1>Sales ({sales.Count()})</h1>";\n}\n\npublic class FileSaver              // saves to disk\n{\n    public void Save(string path, string content) => File.WriteAllText(path, content);\n}\n\npublic class EmailSender            // sends email\n{\n    public void Send(string to, string subject, string body) => mail.Send(to, subject, body);\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,l.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List the three responsibilities in the \u201cbad\u201d example."}),"\n",(0,l.jsxs)(n.li,{children:["How many reasons to change does the refactored ",(0,l.jsx)(n.code,{children:"ReportGenerator"})," have?"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,l.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Find a class with >2 responsibilities and split it into focused classes or methods."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"-o--openclosed-principle-ocp",children:"\ud83d\udd39 O \u2013 Open/Closed Principle (OCP)"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Software entities should be open for extension, but closed for modification."})}),"\n",(0,l.jsx)(n.h3,{id:"problem-example-1",children:"Problem Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:'public class BonusCalculator\n{\n    public decimal Calculate(Employee e)\n    {\n        if (e.Type == "Permanent") return e.Salary * 0.1m;\n        if (e.Type == "Contract")  return e.Salary * 0.05m;\n        // add more `if` for every new employee type\u2026\n        return 0;\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"refactored-strategy-pattern",children:"Refactored (Strategy Pattern)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"public interface IBonusPolicy\n{\n    decimal Calculate(Employee e);\n}\n\npublic class PermanentBonus : IBonusPolicy\n{\n    public decimal Calculate(Employee e) => e.Salary * 0.1m;\n}\n\npublic class ContractBonus : IBonusPolicy\n{\n    public decimal Calculate(Employee e) => e.Salary * 0.05m;\n}\n\npublic class BonusCalculator\n{\n    private readonly IDictionary<string, IBonusPolicy> _policies;\n    public BonusCalculator(IDictionary<string, IBonusPolicy> policies) => _policies = policies;\n\n    public decimal Calculate(Employee e) => _policies[e.Type].Calculate(e);\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,l.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["How does the new design let us add a ",(0,l.jsx)(n.strong,{children:"FreelancerBonus"})," without editing ",(0,l.jsx)(n.code,{children:"BonusCalculator"}),"?"]}),"\n",(0,l.jsx)(n.li,{children:"Which code smell did we remove?"}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,l.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Implement a new ",(0,l.jsx)(n.code,{children:"FreelancerBonus"})," policy and register it without changing existing classes."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"-l--liskov-substitution-principle-lsp",children:"\ud83d\udd39 L \u2013 Liskov Substitution Principle (LSP)"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Subtypes must be substitutable for their base types without breaking correctness."})}),"\n",(0,l.jsx)(n.h3,{id:"problem-violation",children:"Problem Violation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"public class Rectangle\n{\n    public int Width  { get; set; }\n    public int Height { get; set; }\n    public int Area() => Width * Height;\n}\n\npublic class Square : Rectangle\n{\n    public override int Width\n    {\n        set { base.Width = base.Height = value; }\n    }\n    public override int Height\n    {\n        set { base.Width = base.Height = value; }\n    }\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Square"})," breaks expectations: setting ",(0,l.jsx)(n.code,{children:"Width"})," unexpectedly changes ",(0,l.jsx)(n.code,{children:"Height"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"fix-favor-composition",children:"Fix (Favor Composition)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"public abstract class Shape\n{\n    public abstract int Area();\n}\n\npublic class Square : Shape\n{\n    public int Side { get; set; }\n    public override int Area() => Side * Side;\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,l.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Why did inheriting ",(0,l.jsx)(n.code,{children:"Square"})," from ",(0,l.jsx)(n.code,{children:"Rectangle"})," violate LSP?"]}),"\n",(0,l.jsx)(n.li,{children:"How does the new design restore substitutability?"}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,l.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Create a ",(0,l.jsx)(n.code,{children:"Circle : Shape"})," class and show that any ",(0,l.jsx)(n.code,{children:"Shape"})," can be used polymorphically without surprises."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"-i--interface-segregation-principle-isp",children:"\ud83d\udd39 I \u2013 Interface Segregation Principle (ISP)"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Clients should not be forced to depend on methods they do not use."})}),"\n",(0,l.jsx)(n.h3,{id:"problem-example-2",children:"Problem Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"public interface IWorker\n{\n    void Work();\n    void Eat();\n}\n\npublic class Robot : IWorker\n{\n    public void Work() { /*\u2026*/ }\n    public void Eat()  { /* meaningless for robots */ }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"refactored-split-interfaces",children:"Refactored (Split Interfaces)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"public interface IWorkable { void Work(); }\npublic interface IEatable  { void Eat(); }\n\npublic class Human : IWorkable, IEatable\n{\n    public void Work() { /*\u2026*/ }\n    public void Eat()  { /*\u2026*/ }\n}\n\npublic class Robot : IWorkable\n{\n    public void Work() { /*\u2026*/ }\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,l.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Which method was a \u201cpollution\u201d for ",(0,l.jsx)(n.code,{children:"Robot"}),"?"]}),"\n",(0,l.jsx)(n.li,{children:"How does splitting interfaces improve clarity?"}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,l.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Identify an overly large interface in a code sample and split it into smaller ones."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"-d--dependency-inversion-principle-dip",children:"\ud83d\udd39 D \u2013 Dependency Inversion Principle (DIP)"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"High\u2011level modules should not depend on low\u2011level modules; both should depend on abstractions."})}),"\n",(0,l.jsx)(n.h3,{id:"problem-example-3",children:"Problem Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"public class ReportExporter\n{\n    private readonly SqlExporter exporter = new SqlExporter();\n    public void Export(string html) => exporter.Save(html);\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"refactored-depend-on-abstraction",children:"Refactored (Depend on Abstraction)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:'public interface IExporter\n{\n    void Save(string content);\n}\n\npublic class SqlExporter : IExporter\n{\n    public void Save(string content) { /*\u2026*/ }\n}\n\npublic class FileExporter : IExporter\n{\n    public void Save(string content) => File.WriteAllText("report.html", content);\n}\n\npublic class ReportExporter\n{\n    private readonly IExporter exporter;\n    public ReportExporter(IExporter exporter) => this.exporter = exporter;\n    public void Export(string html) => exporter.Save(html);\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,l.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"How does constructor injection enable easier testing?"}),"\n",(0,l.jsx)(n.li,{children:"Which principle also helps here besides DIP?"}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,l.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Write a unit test for ",(0,l.jsx)(n.code,{children:"ReportExporter"})," using a fake ",(0,l.jsx)(n.code,{children:"IExporter"})," implementation to verify ",(0,l.jsx)(n.code,{children:"Export"})," is called."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"-solid-in-practice",children:"\ud83e\uddf9 SOLID in Practice"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"SRP + OCP keep classes small and allow new features without touching existing code."}),"\n",(0,l.jsx)(n.li,{children:"LSP & ISP protect against unexpected side\u2011effects and bloated dependencies."}),"\n",(0,l.jsx)(n.li,{children:"DIP decouples high\u2011level policy from low\u2011level details, enabling easy testing and swapping implementations."}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Mastering SOLID turns \u201cgood intentions\u201d into ",(0,l.jsx)(n.strong,{children:"maintainable code"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(6540);const l={},r=s.createContext(l);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);