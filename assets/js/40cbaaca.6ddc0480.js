"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[8794],{7315:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Contents/Session3/DI-and-IOC","title":"Dependency Injection (DI) and Inversion of Control (IoC)","description":"Dependency Injection (DI) and Inversion of Control (IoC)","source":"@site/docs/Contents/Session3/01-DI-and-IOC.md","sourceDirName":"Contents/Session3","slug":"/Contents/Session3/DI-and-IOC","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session3/DI-and-IOC","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/blob/main/docs/docs/Contents/Session3/01-DI-and-IOC.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Dependency Injection (DI) and Inversion of Control (IoC)"},"sidebar":"tutorialSidebar","previous":{"title":"Session 3","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/category/session-3"},"next":{"title":"REST","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session3/REST"}}');var o=r(4848),t=r(8453);const s={title:"Dependency Injection (DI) and Inversion of Control (IoC)"},c=void 0,d={},l=[{value:"Dependency Injection (DI) and Inversion of Control (IoC)",id:"dependency-injection-di-and-inversion-of-control-ioc",level:2},{value:"What is a dependency?",id:"what-is-a-dependency",level:3},{value:"\ud83d\udd39Inversion of Control (IoC)",id:"inversion-of-control-ioc",level:3},{value:"\ud83d\udd39 Dependency Injection (DI)",id:"-dependency-injection-di",level:3},{value:"\ud83d\udd39 IoC Container in .NET",id:"-ioc-container-in-net",level:3},{value:"\ud83d\udd39 Service Lifetimes",id:"-service-lifetimes",level:3}];function a(e){const n={br:"br",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"dependency-injection-di-and-inversion-of-control-ioc",children:"Dependency Injection (DI) and Inversion of Control (IoC)"}),"\n",(0,o.jsx)(n.h3,{id:"what-is-a-dependency",children:"What is a dependency?"}),"\n",(0,o.jsxs)(n.p,{children:["In software development, a ",(0,o.jsx)(n.strong,{children:"dependency"})," is any object that another class needs to function.",(0,o.jsx)(n.br,{}),"\n","For example, a ",(0,o.jsx)(n.code,{children:"ProductService"})," might need access to a ",(0,o.jsx)(n.code,{children:"ProductRepository"})," to fetch data from the database."]}),"\n",(0,o.jsxs)(n.p,{children:["If the service ",(0,o.jsx)(n.strong,{children:"creates"})," the repository directly, the classes become ",(0,o.jsx)(n.strong,{children:"tightly coupled"}),". This leads to:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\u274c Hard to test (you cannot replace it with a mock easily)"}),"\n",(0,o.jsx)(n.li,{children:"\u274c Hard to maintain (any change in repository requires changes in service)"}),"\n",(0,o.jsx)(n.li,{children:"\u274c Hard to extend (adding logging, caching, or monitoring becomes painful)"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"inversion-of-control-ioc",children:"\ud83d\udd39Inversion of Control (IoC)"}),"\n",(0,o.jsx)(n.p,{children:"By default, classes are in control of creating their own dependencies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public class ProductService\r\n{\r\n    private readonly ProductRepository _repository;\r\n\r\n    public ProductService()\r\n    {\r\n        _repository = new ProductRepository(); // tightly coupled\r\n    }\r\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Here, the ",(0,o.jsx)(n.code,{children:"ProductService"})," ",(0,o.jsx)(n.strong,{children:"decides"})," how to create the repository.",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.strong,{children:"Inversion of Control (IoC)"})," means we ",(0,o.jsx)(n.em,{children:"invert this control"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The class no longer creates its dependency."}),"\n",(0,o.jsxs)(n.li,{children:["Instead, the dependency is ",(0,o.jsx)(n.strong,{children:"provided from outside"})," (injected)."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"-dependency-injection-di",children:"\ud83d\udd39 Dependency Injection (DI)"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Dependency Injection (DI)"})," is the most common way to achieve IoC.",(0,o.jsx)(n.br,{}),"\n","Instead of constructing the dependency, we receive it through the constructor:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public class ProductService\r\n{\r\n    private readonly IProductRepository _repository;\r\n\r\n    // Dependency is injected via constructor\r\n    public ProductService(IProductRepository repository)\r\n    {\r\n        _repository = repository;\r\n    }\r\n\r\n    public void PrintProductName(int id)\r\n    {\r\n        var product = _repository.GetById(id);\r\n        Console.WriteLine(product.Name);\r\n    }\r\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now the ",(0,o.jsx)(n.code,{children:"ProductService"})," does not care ",(0,o.jsx)(n.strong,{children:"how"})," the repository is created.",(0,o.jsx)(n.br,{}),"\n","We can inject a real repository, a fake one, or a mock \u2014 depending on the context."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"-ioc-container-in-net",children:"\ud83d\udd39 IoC Container in .NET"}),"\n",(0,o.jsxs)(n.p,{children:["ASP.NET Core provides a built-in ",(0,o.jsx)(n.strong,{children:"IoC Container"})," that manages dependencies for us.",(0,o.jsx)(n.br,{}),"\n","We register services inside ",(0,o.jsx)(n.code,{children:"Program.cs"})," (or ",(0,o.jsx)(n.code,{children:"Startup.cs"})," in older projects):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'var builder = WebApplication.CreateBuilder(args);\r\n\r\n// Register dependencies\r\nbuilder.Services.AddScoped<IProductRepository, ProductRepository>();\r\nbuilder.Services.AddScoped<ProductService>();\r\n\r\nvar app = builder.Build();\r\n\r\n// Resolve dependency automatically when creating controller\r\napp.MapGet("/products/{id}", (int id, ProductService service) =>\r\n{\r\n    service.PrintProductName(id);\r\n    return Results.Ok();\r\n});\r\n\r\napp.Run();\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"-service-lifetimes",children:"\ud83d\udd39 Service Lifetimes"}),"\n",(0,o.jsxs)(n.p,{children:["When registering services, we must choose their ",(0,o.jsx)(n.strong,{children:"lifetime"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Transient"}),": a new instance every time it is requested.",(0,o.jsx)(n.br,{}),"\n","Example: ",(0,o.jsx)(n.code,{children:"builder.Services.AddTransient<IService, Service>();"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Scoped"}),": one instance per HTTP request (most common for web apps).",(0,o.jsx)(n.br,{}),"\n","Example: ",(0,o.jsx)(n.code,{children:"builder.Services.AddScoped<IService, Service>();"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Singleton"}),": one instance for the entire application lifetime.",(0,o.jsx)(n.br,{}),"\n","Example: ",(0,o.jsx)(n.code,{children:"builder.Services.AddSingleton<IService, Service>();"})]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,o.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Why is tight coupling a problem in software design?"}),"\n",(0,o.jsx)(n.li,{children:"What is the difference between IoC and DI?"}),"\n",(0,o.jsx)(n.li,{children:"Which service lifetime would you use for a database context? Why?"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,o.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Refactor a class that creates its own dependencies into one that uses constructor injection."}),"\n",(0,o.jsx)(n.li,{children:"Register the dependency in the ASP.NET Core IoC container and resolve it in a controller."}),"\n",(0,o.jsx)(n.li,{children:"Experiment with different lifetimes (Transient, Scoped, Singleton) and observe the behavior."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var i=r(6540);const o={},t=i.createContext(o);function s(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);