"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[6392],{979:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"Contents/Session1/Classes-constructors-properties-inheritance/Record-vs-Class-vs-Struct","title":"Record vs Class vs Struct","description":"\ud83d\udd39 What is a record?","source":"@site/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/11-Record-vs-Class-vs-Struct.md","sourceDirName":"Contents/Session1/04-Classes-constructors-properties-inheritance","slug":"/Contents/Session1/Classes-constructors-properties-inheritance/Record-vs-Class-vs-Struct","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Record-vs-Class-vs-Struct","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/blob/main/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/11-Record-vs-Class-vs-Struct.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"Record vs Class vs Struct"},"sidebar":"tutorialSidebar","previous":{"title":"Struct vs Class","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Struct-vs-Class"},"next":{"title":"Static Members and Static Class","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Static-Members-and-Static-Class"}}');var t=r(4848),c=r(8453);const i={title:"Record vs Class vs Struct"},d="Record vs Class vs Struct",l={},o=[{value:"\ud83d\udd39 What is a <code>record</code>?",id:"-what-is-a-record",level:2},{value:"\ud83d\udd38 When to use a <code>record</code>?",id:"-when-to-use-a-record",level:2},{value:"\ud83d\udd38 Comparing <code>record</code>, <code>class</code>, and <code>struct</code>",id:"-comparing-record-class-and-struct",level:2},{value:"\ud83e\udde0 Example Comparison",id:"-example-comparison",level:2},{value:"<code>record</code> equality example:",id:"record-equality-example",level:3},{value:"<code>class</code> reference equality:",id:"class-reference-equality",level:3}];function a(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"record-vs-class-vs-struct",children:"Record vs Class vs Struct"})}),"\n",(0,t.jsxs)(s.h2,{id:"-what-is-a-record",children:["\ud83d\udd39 What is a ",(0,t.jsx)(s.code,{children:"record"}),"?"]}),"\n",(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.code,{children:"record"})," is a ",(0,t.jsx)(s.strong,{children:"reference type"})," introduced in ",(0,t.jsx)(s.strong,{children:"C# 9"})," for modeling ",(0,t.jsx)(s.strong,{children:"immutable data"})," with ",(0,t.jsx)(s.strong,{children:"value-based equality"}),"."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Stored on the ",(0,t.jsx)(s.strong,{children:"heap"})]}),"\n",(0,t.jsx)(s.li,{children:"Passed by reference"}),"\n",(0,t.jsxs)(s.li,{children:["Automatically implements ",(0,t.jsx)(s.code,{children:"Equals()"}),", ",(0,t.jsx)(s.code,{children:"GetHashCode()"}),", and ",(0,t.jsx)(s.code,{children:"ToString()"})]}),"\n",(0,t.jsx)(s.li,{children:"Ideal for DTOs, configs, models"}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"public record PersonRecord(string Name, int Age);\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'var p1 = new PersonRecord("Ali", 30);\r\nvar p2 = p1 with { Age = 40 };\r\nConsole.WriteLine(p1); // PersonRecord { Name = Ali, Age = 30 }\r\nConsole.WriteLine(p2); // PersonRecord { Name = Ali, Age = 40 }\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.h2,{id:"-when-to-use-a-record",children:["\ud83d\udd38 When to use a ",(0,t.jsx)(s.code,{children:"record"}),"?"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["You want to ",(0,t.jsx)(s.strong,{children:"represent data"})," rather than behavior"]}),"\n",(0,t.jsxs)(s.li,{children:["You need ",(0,t.jsx)(s.strong,{children:"immutable"})," objects with ",(0,t.jsx)(s.strong,{children:"value equality"})]}),"\n",(0,t.jsxs)(s.li,{children:["You\u2019re building:","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Request/response models"}),"\n",(0,t.jsx)(s.li,{children:"External data contracts (e.g., JSON, XML)"}),"\n",(0,t.jsx)(s.li,{children:"Value-centric domain models"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.h2,{id:"-comparing-record-class-and-struct",children:["\ud83d\udd38 Comparing ",(0,t.jsx)(s.code,{children:"record"}),", ",(0,t.jsx)(s.code,{children:"class"}),", and ",(0,t.jsx)(s.code,{children:"struct"})]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Feature"}),(0,t.jsx)(s.th,{children:(0,t.jsx)(s.code,{children:"record"})}),(0,t.jsx)(s.th,{children:(0,t.jsx)(s.code,{children:"class"})}),(0,t.jsx)(s.th,{children:(0,t.jsx)(s.code,{children:"struct"})})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Type"}),(0,t.jsx)(s.td,{children:"Reference"}),(0,t.jsx)(s.td,{children:"Reference"}),(0,t.jsx)(s.td,{children:"Value"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Equality"}),(0,t.jsx)(s.td,{children:"Value-based by default"}),(0,t.jsx)(s.td,{children:"Reference-based"}),(0,t.jsx)(s.td,{children:"Value-based"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Mutability"}),(0,t.jsx)(s.td,{children:"Immutable by convention"}),(0,t.jsx)(s.td,{children:"Mutable by default"}),(0,t.jsx)(s.td,{children:"Mutable by default"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Inheritance"}),(0,t.jsx)(s.td,{children:"Supported"}),(0,t.jsx)(s.td,{children:"Supported"}),(0,t.jsx)(s.td,{children:"Not supported"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Immutability support"}),(0,t.jsxs)(s.td,{children:["Built-in via ",(0,t.jsx)(s.code,{children:"init"})," and ",(0,t.jsx)(s.code,{children:"with"})]}),(0,t.jsx)(s.td,{children:"Manual"}),(0,t.jsx)(s.td,{children:"Manual"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Use case"}),(0,t.jsx)(s.td,{children:"DTOs, ViewModels, configs"}),(0,t.jsx)(s.td,{children:"Services, domain logic"}),(0,t.jsx)(s.td,{children:"Coordinates, colors, etc."})]})]})]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"-example-comparison",children:"\ud83e\udde0 Example Comparison"}),"\n",(0,t.jsxs)(s.h3,{id:"record-equality-example",children:[(0,t.jsx)(s.code,{children:"record"})," equality example:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'record A(string Name);\r\nrecord B(string Name);\r\n\r\nConsole.WriteLine(new A("Ali") == new A("Ali")); // true\r\nConsole.WriteLine(new B("Ali") == new B("Ali")); // true\n'})}),"\n",(0,t.jsxs)(s.h3,{id:"class-reference-equality",children:[(0,t.jsx)(s.code,{children:"class"})," reference equality:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'class C { public string Name; }\r\n\r\nConsole.WriteLine(new C { Name = "Ali" } == new C { Name = "Ali" }); // false\n'})}),"\n",(0,t.jsxs)(s.p,{children:["\ud83d\udfe8 ",(0,t.jsx)(s.strong,{children:"Questions for students"})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Why are records preferred over classes for DTOs?"}),"\n",(0,t.jsx)(s.li,{children:"What\u2019s the difference between reference equality and value equality?"}),"\n",(0,t.jsx)(s.li,{children:"Can a record be mutable?"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["\ud83d\udfe6 ",(0,t.jsx)(s.strong,{children:"Practice"})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Create a ",(0,t.jsx)(s.code,{children:"record"})," for ",(0,t.jsx)(s.code,{children:"Book"})," with ",(0,t.jsx)(s.code,{children:"Title"}),", ",(0,t.jsx)(s.code,{children:"Author"}),", and ",(0,t.jsx)(s.code,{children:"Year"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Override ",(0,t.jsx)(s.code,{children:"ToString()"})," for a custom print format."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>d});var n=r(6540);const t={},c=n.createContext(t);function i(e){const s=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);