"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[9123],{2997:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Contents/Session 1/Classes-constructors-properties-inheritance/Interface","title":"Interfaces","description":"An interface defines a contract that a class agrees to follow.","source":"@site/docs/Contents/Session 1/04-Classes-constructors-properties-inheritance/08-Interface.md","sourceDirName":"Contents/Session 1/04-Classes-constructors-properties-inheritance","slug":"/Contents/Session 1/Classes-constructors-properties-inheritance/Interface","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/Interface","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/04-Classes-constructors-properties-inheritance/08-Interface.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Interfaces","sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Abstraction","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/Abstraction"},"next":{"title":"Enums","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/Enums copy"}}');var r=s(4848),t=s(8453);const l={title:"Interfaces",sidebar_position:8},c="\ud83e\udd1d Interfaces in C#",d={},o=[{value:"\ud83e\udde0 Real-Life Analogy",id:"-real-life-analogy",level:2},{value:"\ud83e\uddfe Defining an Interface",id:"-defining-an-interface",level:2},{value:"\ud83e\uddea Implementing an Interface",id:"-implementing-an-interface",level:2},{value:"\ud83d\udcda Multiple Implementations",id:"-multiple-implementations",level:2},{value:"\ud83d\udd01 Interface vs Abstract Class",id:"-interface-vs-abstract-class",level:2},{value:"\ud83d\udd0d Why Use Interfaces?",id:"-why-use-interfaces",level:2},{value:"\ud83e\uddfc Clean Code Tips",id:"-clean-code-tips",level:2},{value:"\u26a1 Advanced: Default Interface Methods (C# 8+)",id:"-advanced-default-interface-methods-c-8",level:2},{value:"\u2705 Why is this useful?",id:"-why-is-this-useful",level:2},{value:"\u26a0\ufe0f When to use (and when not to)",id:"\ufe0f-when-to-use-and-when-not-to",level:2},{value:"\u2705 Summary",id:"-summary",level:2}];function a(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-interfaces-in-c",children:"\ud83e\udd1d Interfaces in C#"})}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.strong,{children:"interface"})," defines a ",(0,r.jsx)(n.strong,{children:"contract"})," that a class agrees to follow."]}),"\n",(0,r.jsxs)(n.p,{children:["It tells us ",(0,r.jsx)(n.strong,{children:"what"})," the class can do \u2014 but not ",(0,r.jsx)(n.strong,{children:"how"})," it does it."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-real-life-analogy",children:"\ud83e\udde0 Real-Life Analogy"}),"\n",(0,r.jsxs)(n.p,{children:["Think of an ",(0,r.jsx)(n.strong,{children:"electric plug"})," \ud83d\udd0c \u2014 it provides a standard interface (shape, voltage)."]}),"\n",(0,r.jsxs)(n.p,{children:["You can plug in different devices (laptop, phone charger),",(0,r.jsx)(n.br,{}),"\n","but ",(0,r.jsx)(n.strong,{children:"each device has its own implementation"})," of how it uses electricity."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-defining-an-interface",children:"\ud83e\uddfe Defining an Interface"}),"\n",(0,r.jsx)(n.p,{children:"Interfaces in C#:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Start with ",(0,r.jsx)(n.code,{children:"I"})," (e.g. ",(0,r.jsx)(n.code,{children:"IDrawable"}),", ",(0,r.jsx)(n.code,{children:"IVehicle"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Only contain method/property ",(0,r.jsx)(n.strong,{children:"signatures"})]}),"\n",(0,r.jsxs)(n.li,{children:["Have ",(0,r.jsx)(n.strong,{children:"no implementation"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public interface ITree\r\n{\r\n    void Grow();\r\n    void ProduceFruit();\r\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-implementing-an-interface",children:"\ud83e\uddea Implementing an Interface"}),"\n",(0,r.jsxs)(n.p,{children:["Any class that implements the interface must implement ",(0,r.jsx)(n.strong,{children:"all its members"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class AppleTree : ITree\r\n{\r\n    public void Grow() => Console.WriteLine("Growing Apple Tree \ud83c\udf4e");\r\n    public void ProduceFruit() => Console.WriteLine("Producing apples \ud83c\udf4e");\r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,r.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"What happens if a class implements an interface but forgets to implement one method?"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-multiple-implementations",children:"\ud83d\udcda Multiple Implementations"}),"\n",(0,r.jsx)(n.p,{children:"You can implement an interface with many different classes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"IWorker"})," \u2192 ",(0,r.jsx)(n.code,{children:"Engineer"}),", ",(0,r.jsx)(n.code,{children:"Designer"}),", ",(0,r.jsx)(n.code,{children:"Intern"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"IVehicle"})," \u2192 ",(0,r.jsx)(n.code,{children:"Car"}),", ",(0,r.jsx)(n.code,{children:"Bike"}),", ",(0,r.jsx)(n.code,{children:"Truck"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class PineTree : ITree\r\n{\r\n    public void Grow() => Console.WriteLine("Growing Pine Tree \ud83c\udf32");\r\n    public void ProduceFruit() => Console.WriteLine("Producing pine cones \ud83c\udf30");\r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-interface-vs-abstract-class",children:"\ud83d\udd01 Interface vs Abstract Class"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"Interface"}),(0,r.jsx)(n.th,{children:"Abstract Class"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Methods with code?"}),(0,r.jsx)(n.td,{children:"\u274c Not allowed (C# < 8)"}),(0,r.jsx)(n.td,{children:"\u2705 Can have logic"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Multiple inheritance"}),(0,r.jsx)(n.td,{children:"\u2705 Yes"}),(0,r.jsx)(n.td,{children:"\u274c Only one base class"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Constructors?"}),(0,r.jsx)(n.td,{children:"\u274c No"}),(0,r.jsx)(n.td,{children:"\u2705 Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Fields?"}),(0,r.jsx)(n.td,{children:"\u274c No"}),(0,r.jsx)(n.td,{children:"\u2705 Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"When to use?"}),(0,r.jsxs)(n.td,{children:["For ",(0,r.jsx)(n.strong,{children:"contracts"})]}),(0,r.jsxs)(n.td,{children:["For ",(0,r.jsx)(n.strong,{children:"shared logic + contract"})]})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-why-use-interfaces",children:"\ud83d\udd0d Why Use Interfaces?"}),"\n",(0,r.jsx)(n.p,{children:"\u2705 Common reasons:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dependency Injection"}),"\n",(0,r.jsx)(n.li,{children:"Test Doubles (Mocks, Stubs)"}),"\n",(0,r.jsx)(n.li,{children:"Plug-and-play architecture"}),"\n",(0,r.jsx)(n.li,{children:"Clean, loosely coupled code"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-clean-code-tips",children:"\ud83e\uddfc Clean Code Tips"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 Name interfaces with an ",(0,r.jsx)(n.code,{children:"I"})," prefix (",(0,r.jsx)(n.code,{children:"IUserRepository"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Prefer interfaces for all core business services"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 One interface per responsibility (Single Responsibility Principle)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Don\u2019t create interfaces that are never reused"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,r.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"What are some real examples of interfaces you\u2019ve seen in .NET or other languages?"}),"\n",(0,r.jsx)(n.li,{children:"Why might a team prefer programming to an interface instead of a concrete class?"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,r.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Create an ",(0,r.jsx)(n.code,{children:"IAnimal"})," interface with methods ",(0,r.jsx)(n.code,{children:"Speak()"})," and ",(0,r.jsx)(n.code,{children:"Move()"})]}),"\n",(0,r.jsxs)(n.li,{children:["Implement it with ",(0,r.jsx)(n.code,{children:"Dog"})," and ",(0,r.jsx)(n.code,{children:"Bird"})," classes"]}),"\n",(0,r.jsxs)(n.li,{children:["Write a method that accepts an ",(0,r.jsx)(n.code,{children:"IAnimal"})," and calls both methods"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-advanced-default-interface-methods-c-8",children:"\u26a1 Advanced: Default Interface Methods (C# 8+)"}),"\n",(0,r.jsxs)(n.p,{children:["Starting from C# 8, interfaces can contain ",(0,r.jsx)(n.strong,{children:"default method implementations"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This allows you to define ",(0,r.jsx)(n.strong,{children:"shared logic"})," inside the interface itself \u2014 something that was previously only possible with abstract classes."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["Now, any class that implements ",(0,r.jsx)(n.code,{children:"ITree"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 Must implement ",(0,r.jsx)(n.code,{children:"Grow()"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Can skip implementing ",(0,r.jsx)(n.code,{children:"Photosynthesize()"})," \u2014 the interface already has a default version"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-why-is-this-useful",children:"\u2705 Why is this useful?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Lets you add new methods to interfaces without breaking old code"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Avoids duplication by providing shared behavior"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Makes interfaces more flexible for API design"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-when-to-use-and-when-not-to",children:"\u26a0\ufe0f When to use (and when not to)"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Use it when..."}),(0,r.jsx)(n.th,{children:"Avoid it when..."})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"You want to evolve interfaces over time"}),(0,r.jsx)(n.td,{children:"You need strict separation of interface & logic"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"You want to reuse default behavior"}),(0,r.jsx)(n.td,{children:"You\u2019re targeting old versions of C# / .NET"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"You\u2019re building extensible plugin-based code"}),(0,r.jsx)(n.td,{children:"You want very lightweight interfaces"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,r.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Why might default interface methods help in large applications or libraries?"}),"\n",(0,r.jsx)(n.li,{children:"How are they different from methods in abstract classes?"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,r.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Update your ",(0,r.jsx)(n.code,{children:"ITree"})," interface to include a default method ",(0,r.jsx)(n.code,{children:"Log()"})]}),"\n",(0,r.jsxs)(n.li,{children:["Let it print ",(0,r.jsx)(n.code,{children:'"Tree logged at [DateTime.Now]"'})," by default"]}),"\n",(0,r.jsxs)(n.li,{children:["Try implementing it in ",(0,r.jsx)(n.code,{children:"AppleTree"})," ",(0,r.jsx)(n.strong,{children:"without overriding"})," ",(0,r.jsx)(n.code,{children:"Log()"})]}),"\n",(0,r.jsxs)(n.li,{children:["Then override it in ",(0,r.jsx)(n.code,{children:"PineTree"})," to print a custom message"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-summary",children:"\u2705 Summary"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Concept"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Interface"}),(0,r.jsx)(n.td,{children:"Contract that defines what a class can do"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Implementation"}),(0,r.jsx)(n.td,{children:"Class must implement all members"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Use cases"}),(0,r.jsx)(n.td,{children:"DI, Testing, Polymorphism, Plug-in systems"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);