"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[3005],{4308:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"Contents/Session1/Classes-constructors-properties-inheritance/Polymorphism","title":"Polymorphism","description":"Polymorphism means \\"many forms\\". It allows you to write code that can work with different object types in a consistent way.","source":"@site/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/05-Polymorphism.md","sourceDirName":"Contents/Session1/04-Classes-constructors-properties-inheritance","slug":"/Contents/Session1/Classes-constructors-properties-inheritance/Polymorphism","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Polymorphism","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/04-Classes-constructors-properties-inheritance/05-Polymorphism.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Polymorphism","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Inheritance","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Inheritance"},"next":{"title":"Encapsulation","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session1/Classes-constructors-properties-inheritance/Encapsulation"}}');var i=s(4848),o=s(8453);const t={title:"Polymorphism",sidebar_position:5},l="\ud83d\udd00 Polymorphism",c={},d=[{value:"\ud83e\udde0 Why Polymorphism?",id:"-why-polymorphism",level:2},{value:"\ud83d\udcd8 Example: Using a List of Trees",id:"-example-using-a-list-of-trees",level:3},{value:"\u2699\ufe0f How Polymorphism Works in C#",id:"\ufe0f-how-polymorphism-works-in-c",level:2},{value:"\ud83e\uddea <code>virtual</code> + <code>override</code> vs <code>new</code>",id:"-virtual--override-vs-new",level:3},{value:"\ud83d\udcd8 Example: Method Hiding with <code>new</code>",id:"-example-method-hiding-with-new",level:3},{value:"\ud83e\uddfc Clean Code Tips for Polymorphism",id:"-clean-code-tips-for-polymorphism",level:2},{value:"\u2705 Use <code>override</code>, not <code>new</code>",id:"-use-override-not-new",level:3},{value:"\u2705 Don\u2019t override just to call the base method",id:"-dont-override-just-to-call-the-base-method",level:3},{value:"\u2705 Avoid business logic in the base class",id:"-avoid-business-logic-in-the-base-class",level:3},{value:"\u2705 Make base methods <code>abstract</code> if they must be overridden",id:"-make-base-methods-abstract-if-they-must-be-overridden",level:3},{value:"\u2705 Design for extensibility",id:"-design-for-extensibility",level:3},{value:"\ud83e\uddf1 Abstract Classes and Methods",id:"-abstract-classes-and-methods",level:2},{value:"\ud83d\udccc What is an Abstract Method?",id:"-what-is-an-abstract-method",level:3},{value:"\ud83d\udccc What is an Abstract Class?",id:"-what-is-an-abstract-class",level:3},{value:"\ud83d\udcd8 Example: Abstract Tree",id:"-example-abstract-tree",level:3},{value:"\ud83d\udd0d Summary: <code>virtual</code> vs <code>abstract</code> vs <code>new</code>",id:"-summary-virtual-vs-abstract-vs-new",level:2}];function a(e){const r={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"-polymorphism",children:"\ud83d\udd00 Polymorphism"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Polymorphism"}),' means "',(0,i.jsx)(r.strong,{children:"many forms"}),'". It allows you to write code that can work with ',(0,i.jsx)(r.strong,{children:"different object types"})," in a consistent way."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-why-polymorphism",children:"\ud83e\udde0 Why Polymorphism?"}),"\n",(0,i.jsx)(r.p,{children:"Imagine you have different types of trees:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"AppleTree \ud83c\udf4e"}),"\n",(0,i.jsx)(r.li,{children:"OliveTree \ud83e\uded2"}),"\n",(0,i.jsx)(r.li,{children:"PineTree \ud83c\udf32"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["All of them have a method called ",(0,i.jsx)(r.code,{children:"Grow()"})," \u2014 but ",(0,i.jsx)(r.strong,{children:"each tree grows differently"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["With polymorphism, you can call ",(0,i.jsx)(r.code,{children:"Grow()"})," on any kind of tree, without worrying about which specific tree it is \u2014 the correct version will run."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-example-using-a-list-of-trees",children:"\ud83d\udcd8 Example: Using a List of Trees"}),"\n",(0,i.jsx)(r.p,{children:"Let\u2019s say we want to grow a list of trees together:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class Tree\r\n{\r\n    public virtual void Grow()\r\n    {\r\n        Console.WriteLine("Generic tree grows.");\r\n    }\r\n}\r\n\r\npublic class AppleTree : Tree\r\n{\r\n    public override void Grow()\r\n    {\r\n        Console.WriteLine("Apple tree grows by 2 meters \ud83c\udf4e");\r\n    }\r\n}\r\n\r\npublic class OliveTree : Tree\r\n{\r\n    public override void Grow()\r\n    {\r\n        Console.WriteLine("Olive tree grows by 1 meter \ud83e\uded2");\r\n    }\r\n}\r\n\r\n// Using polymorphism\r\nList<Tree> forest = new List<Tree>\r\n{\r\n    new AppleTree(),\r\n    new OliveTree(),\r\n    new AppleTree()\r\n};\r\n\r\nforeach (Tree tree in forest)\r\n{\r\n    tree.Grow();  // Will call correct Grow() depending on the tree type\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(r.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["How does the program know which ",(0,i.jsx)(r.code,{children:"Grow()"})," to call for each tree?"]}),"\n",(0,i.jsxs)(r.li,{children:["What would happen if ",(0,i.jsx)(r.code,{children:"Grow()"})," was not marked as ",(0,i.jsx)(r.code,{children:"virtual"}),"?"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(r.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Create a list of ",(0,i.jsx)(r.code,{children:"Tree"})," objects with multiple subclasses."]}),"\n",(0,i.jsxs)(r.li,{children:["Write a loop that calls ",(0,i.jsx)(r.code,{children:"Grow()"})," on each one."]}),"\n",(0,i.jsxs)(r.li,{children:["Then try adding a new subclass (",(0,i.jsx)(r.code,{children:"CherryTree"}),") and see what happens \u2014 without changing the loop!"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"\ufe0f-how-polymorphism-works-in-c",children:"\u2699\ufe0f How Polymorphism Works in C#"}),"\n",(0,i.jsxs)(r.p,{children:["To use polymorphism in C#, you need to declare methods using the ",(0,i.jsx)(r.code,{children:"virtual"})," keyword in the superclass, and override them using ",(0,i.jsx)(r.code,{children:"override"})," in the subclass."]}),"\n",(0,i.jsxs)(r.p,{children:["If you forget to use ",(0,i.jsx)(r.code,{children:"override"}),", the method will be ",(0,i.jsx)(r.strong,{children:"hidden"})," \u2014 not overridden."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.h3,{id:"-virtual--override-vs-new",children:["\ud83e\uddea ",(0,i.jsx)(r.code,{children:"virtual"})," + ",(0,i.jsx)(r.code,{children:"override"})," vs ",(0,i.jsx)(r.code,{children:"new"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"virtual"}),": Marks a method in the ",(0,i.jsx)(r.strong,{children:"superclass"})," as overridable."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"override"}),": Tells the compiler you\u2019re ",(0,i.jsx)(r.strong,{children:"intentionally replacing"})," a virtual method."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"new"}),": Hides the base method, but doesn\u2019t override it \u2014 this can cause confusion."]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.h3,{id:"-example-method-hiding-with-new",children:["\ud83d\udcd8 Example: Method Hiding with ",(0,i.jsx)(r.code,{children:"new"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class Tree\r\n{\r\n    public virtual void Grow()\r\n    {\r\n        Console.WriteLine("Generic tree grows.");\r\n    }\r\n}\r\n\r\npublic class ConfusedTree : Tree\r\n{\r\n    public new void Grow()\r\n    {\r\n        Console.WriteLine("Confused tree grows in its own weird way.");\r\n    }\r\n}\r\n\r\nTree t = new ConfusedTree();\r\nt.Grow(); // Will print: "Generic tree grows." \ud83d\ude31 (not the subclass version!)\n'})}),"\n",(0,i.jsxs)(r.p,{children:["If you declare a method in a subclass without using ",(0,i.jsx)(r.code,{children:"override"}),", you\u2019re not overriding \u2014 you\u2019re hiding the method.\r\nThis ",(0,i.jsx)(r.strong,{children:"breaks polymorphism"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(r.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["What\u2019s the difference between using ",(0,i.jsx)(r.code,{children:"override"})," and ",(0,i.jsx)(r.code,{children:"new"}),"?"]}),"\n",(0,i.jsx)(r.li,{children:"Why can method hiding be dangerous?"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"-clean-code-tips-for-polymorphism",children:"\ud83e\uddfc Clean Code Tips for Polymorphism"}),"\n",(0,i.jsx)(r.p,{children:"Polymorphism can make your code cleaner and more extensible \u2014 if used correctly."}),"\n",(0,i.jsx)(r.p,{children:"Here are best practices to follow:"}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.h3,{id:"-use-override-not-new",children:["\u2705 Use ",(0,i.jsx)(r.code,{children:"override"}),", not ",(0,i.jsx)(r.code,{children:"new"})]}),"\n",(0,i.jsxs)(r.p,{children:["Using ",(0,i.jsx)(r.code,{children:"new"})," hides the method, but breaks polymorphism. Always prefer ",(0,i.jsx)(r.code,{children:"virtual"})," + ",(0,i.jsx)(r.code,{children:"override"})," to keep behavior predictable."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-dont-override-just-to-call-the-base-method",children:"\u2705 Don\u2019t override just to call the base method"}),"\n",(0,i.jsxs)(r.p,{children:["If your override only calls ",(0,i.jsx)(r.code,{children:"base.Method()"}),", do you really need it? Keep your method overrides meaningful."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-avoid-business-logic-in-the-base-class",children:"\u2705 Avoid business logic in the base class"}),"\n",(0,i.jsx)(r.p,{children:"Keep the base class generic \u2014 put shared structure or abstract behaviors there. Subclass behavior should live in the subclasses."}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.h3,{id:"-make-base-methods-abstract-if-they-must-be-overridden",children:["\u2705 Make base methods ",(0,i.jsx)(r.code,{children:"abstract"})," if they must be overridden"]}),"\n",(0,i.jsxs)(r.p,{children:["If every subclass ",(0,i.jsx)(r.strong,{children:"must"})," implement a method, mark it as ",(0,i.jsx)(r.code,{children:"abstract"}),". This avoids having default logic that might be wrong."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-design-for-extensibility",children:"\u2705 Design for extensibility"}),"\n",(0,i.jsxs)(r.p,{children:["Use polymorphism when you want to ",(0,i.jsx)(r.strong,{children:"add new types without changing existing logic"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Your ",(0,i.jsx)(r.code,{children:"for"})," or ",(0,i.jsx)(r.code,{children:"foreach"})," loop should continue to work if you add ",(0,i.jsx)(r.code,{children:"CherryTree"}),", ",(0,i.jsx)(r.code,{children:"OrangeTree"}),", or even ",(0,i.jsx)(r.code,{children:"CactusTree"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(r.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"What\u2019s the risk of putting complex logic in the base class?"}),"\n",(0,i.jsxs)(r.li,{children:["Why might method hiding (",(0,i.jsx)(r.code,{children:"new"}),") lead to unexpected bugs?"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(r.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Refactor a class hierarchy to use ",(0,i.jsx)(r.code,{children:"virtual"})," and ",(0,i.jsx)(r.code,{children:"override"})," correctly."]}),"\n",(0,i.jsxs)(r.li,{children:["Identify any misuse of ",(0,i.jsx)(r.code,{children:"new"})," and correct it."]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-abstract-classes-and-methods",children:"\ud83e\uddf1 Abstract Classes and Methods"}),"\n",(0,i.jsxs)(r.p,{children:["Sometimes you want to ",(0,i.jsx)(r.strong,{children:"force"})," every subclass to implement certain behavior.",(0,i.jsx)(r.br,{}),"\n","That\u2019s where ",(0,i.jsxs)(r.strong,{children:[(0,i.jsx)(r.code,{children:"abstract"})," classes"]})," and ",(0,i.jsxs)(r.strong,{children:[(0,i.jsx)(r.code,{children:"abstract"})," methods"]})," come in."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-what-is-an-abstract-method",children:"\ud83d\udccc What is an Abstract Method?"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Declared in a ",(0,i.jsx)(r.strong,{children:"base class"})," using the ",(0,i.jsx)(r.code,{children:"abstract"})," keyword."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Has no body"})," (no implementation)."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Must be overridden"})," by all subclasses."]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"-what-is-an-abstract-class",children:"\ud83d\udccc What is an Abstract Class?"}),"\n",(0,i.jsxs)(r.p,{children:["A class that ",(0,i.jsx)(r.strong,{children:"cannot be instantiated"})," and may include abstract methods.",(0,i.jsx)(r.br,{}),"\n","It serves as a ",(0,i.jsx)(r.strong,{children:"blueprint"})," for other classes."]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["Think of it like a ",(0,i.jsx)(r.strong,{children:"template"})," \u2014 you can\u2019t create it directly,",(0,i.jsx)(r.br,{}),"\n","but other classes use it as a base."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"-example-abstract-tree",children:"\ud83d\udcd8 Example: Abstract Tree"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public abstract class Tree\r\n{\r\n    public string Name;\r\n\r\n    public Tree(string name)\r\n    {\r\n        Name = name;\r\n    }\r\n\r\n    public abstract void Grow();\r\n\r\n    public void Photosynthesize()\r\n    {\r\n        Console.WriteLine($"{Name} is photosynthesizing \ud83c\udf1e");\r\n    }\r\n}\r\n\r\npublic class AppleTree : Tree\r\n{\r\n    public AppleTree() : base("Apple Tree") {}\r\n\r\n    public override void Grow()\r\n    {\r\n        Console.WriteLine("Apple Tree grows by 2 meters \ud83c\udf4e");\r\n    }\r\n}\r\n\r\npublic class PineTree : Tree\r\n{\r\n    public PineTree() : base("Pine Tree") {}\r\n\r\n    public override void Grow()\r\n    {\r\n        Console.WriteLine("Pine Tree grows by 3 meters \ud83c\udf32");\r\n    }\r\n}\r\n\r\n// Example usage\r\nList<Tree> forest = new List<Tree>\r\n{\r\n    new AppleTree(),\r\n    new PineTree()\r\n};\r\n\r\nforeach (Tree tree in forest)\r\n{\r\n    tree.Grow();\r\n    tree.Photosynthesize();\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe8 ",(0,i.jsx)(r.strong,{children:"Question for students"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Why would we want to force every tree to implement ",(0,i.jsx)(r.code,{children:"Grow()"}),"?"]}),"\n",(0,i.jsx)(r.li,{children:"Can an abstract class contain non-abstract methods too?"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udfe6 ",(0,i.jsx)(r.strong,{children:"Practice"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Create an ",(0,i.jsx)(r.code,{children:"abstract class Animal"})," with an abstract method ",(0,i.jsx)(r.code,{children:"MakeSound()"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.code,{children:"Dog"})," and ",(0,i.jsx)(r.code,{children:"Cat"})," subclasses, override ",(0,i.jsx)(r.code,{children:"MakeSound()"})," to print different messages."]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.h2,{id:"-summary-virtual-vs-abstract-vs-new",children:["\ud83d\udd0d Summary: ",(0,i.jsx)(r.code,{children:"virtual"})," vs ",(0,i.jsx)(r.code,{children:"abstract"})," vs ",(0,i.jsx)(r.code,{children:"new"})]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Keyword"}),(0,i.jsx)(r.th,{children:"Can have default logic?"}),(0,i.jsx)(r.th,{children:"Must be overridden?"}),(0,i.jsx)(r.th,{children:"Breaks polymorphism?"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"virtual"})}),(0,i.jsx)(r.td,{children:"\u2705 Yes"}),(0,i.jsx)(r.td,{children:"\u274c No"}),(0,i.jsx)(r.td,{children:"\u274c No"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"abstract"})}),(0,i.jsx)(r.td,{children:"\u274c No"}),(0,i.jsx)(r.td,{children:"\u2705 Yes"}),(0,i.jsx)(r.td,{children:"\u274c No"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"new"})}),(0,i.jsx)(r.td,{children:"\u2705 Yes"}),(0,i.jsx)(r.td,{children:"\u274c No"}),(0,i.jsx)(r.td,{children:"\u2705 Yes"})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>l});var n=s(6540);const i={},o=n.createContext(i);function t(e){const r=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);