"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[8941],{6308:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Contents/Session 1/Classes-constructors-properties-inheritance/Value-Types-vs-Reference-Types","title":"Value Types vs Reference Types","description":"\ud83d\udd39 What is a Value Type?","source":"@site/docs/Contents/Session 1/04-Classes-constructors-properties-inheritance/12-Value-Types-vs-Reference-Types.md","sourceDirName":"Contents/Session 1/04-Classes-constructors-properties-inheritance","slug":"/Contents/Session 1/Classes-constructors-properties-inheritance/Value-Types-vs-Reference-Types","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/Value-Types-vs-Reference-Types","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/04-Classes-constructors-properties-inheritance/12-Value-Types-vs-Reference-Types.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"title":"Value Types vs Reference Types"},"sidebar":"tutorialSidebar","previous":{"title":"Static Members and Static Class","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/Static-Members-and-Static-Class"},"next":{"title":"File I/O","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/File-IO"}}');var t=s(4848),i=s(8453);const c={title:"Value Types vs Reference Types"},l="Value Types vs Reference Types",o={},d=[{value:"\ud83d\udd39 What is a Value Type?",id:"-what-is-a-value-type",level:2},{value:"\ud83d\udd39 What is a Reference Type?",id:"-what-is-a-reference-type",level:2},{value:"\ud83d\udd39 Memory and Behavior Differences",id:"-memory-and-behavior-differences",level:2},{value:"\ud83e\uddf9 Clean Code Tips",id:"-clean-code-tips",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"value-types-vs-reference-types",children:"Value Types vs Reference Types"})}),"\n",(0,t.jsx)(n.h2,{id:"-what-is-a-value-type",children:"\ud83d\udd39 What is a Value Type?"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"value type"})," holds data directly in its own memory location."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Stored on the ",(0,t.jsx)(n.strong,{children:"stack"})]}),"\n",(0,t.jsx)(n.li,{children:"Copied by value"}),"\n",(0,t.jsx)(n.li,{children:"Changing one copy doesn\u2019t affect the other"}),"\n",(0,t.jsxs)(n.li,{children:["Includes: ",(0,t.jsx)(n.code,{children:"int"}),", ",(0,t.jsx)(n.code,{children:"float"}),", ",(0,t.jsx)(n.code,{children:"bool"}),", ",(0,t.jsx)(n.code,{children:"char"}),", ",(0,t.jsx)(n.code,{children:"struct"}),", ",(0,t.jsx)(n.code,{children:"DateTime"}),", etc."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"int a = 10;\r\nint b = a;\r\nb = 20;\r\n\r\nConsole.WriteLine(a); // Output: 10\r\nConsole.WriteLine(b); // Output: 20\r\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,t.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"What happens when you assign a value type to another variable?"}),"\n",(0,t.jsxs)(n.li,{children:["Why doesn\u2019t changing ",(0,t.jsx)(n.code,{children:"b"})," affect ",(0,t.jsx)(n.code,{children:"a"})," in this case?"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,t.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a struct called ",(0,t.jsx)(n.code,{children:"Point"})," with ",(0,t.jsx)(n.code,{children:"X"})," and ",(0,t.jsx)(n.code,{children:"Y"})," fields. Copy one ",(0,t.jsx)(n.code,{children:"Point"})," to another and modify it. Compare both values."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-what-is-a-reference-type",children:"\ud83d\udd39 What is a Reference Type?"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"reference type"})," stores a reference (address) to the actual data on the heap."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Stored on the ",(0,t.jsx)(n.strong,{children:"heap"})]}),"\n",(0,t.jsx)(n.li,{children:"Copied by reference"}),"\n",(0,t.jsx)(n.li,{children:"Changing one reference affects all others pointing to the same object"}),"\n",(0,t.jsxs)(n.li,{children:["Includes: ",(0,t.jsx)(n.code,{children:"class"}),", ",(0,t.jsx)(n.code,{children:"string"}),", ",(0,t.jsx)(n.code,{children:"object"}),", ",(0,t.jsx)(n.code,{children:"array"}),", etc."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'class Person\r\n{\r\n    public string Name;\r\n}\r\n\r\nPerson p1 = new Person { Name = "Ali" };\r\nPerson p2 = p1;\r\np2.Name = "Soheil";\r\n\r\nConsole.WriteLine(p1.Name); // Output: Soheil\n'})}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,t.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"What\u2019s being copied here: the object or the reference?"}),"\n",(0,t.jsxs)(n.li,{children:["Why do both ",(0,t.jsx)(n.code,{children:"p1"})," and ",(0,t.jsx)(n.code,{children:"p2"})," show the same name?"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,t.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a class ",(0,t.jsx)(n.code,{children:"Book"})," with ",(0,t.jsx)(n.code,{children:"Title"})," property. Assign one object to another variable, change one, and observe the effect."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-memory-and-behavior-differences",children:"\ud83d\udd39 Memory and Behavior Differences"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"Value Type"}),(0,t.jsx)(n.th,{children:"Reference Type"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Stored in"}),(0,t.jsx)(n.td,{children:"Stack"}),(0,t.jsx)(n.td,{children:"Heap"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Copied by"}),(0,t.jsx)(n.td,{children:"Value"}),(0,t.jsx)(n.td,{children:"Reference (address)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Nullability"}),(0,t.jsx)(n.td,{children:"Can\u2019t be null (unless nullable)"}),(0,t.jsx)(n.td,{children:"Can be null"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Affects original?"}),(0,t.jsx)(n.td,{children:"\u274c No"}),(0,t.jsx)(n.td,{children:"\u2705 Yes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Examples"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"int"}),", ",(0,t.jsx)(n.code,{children:"struct"}),", ",(0,t.jsx)(n.code,{children:"bool"})]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"class"}),", ",(0,t.jsx)(n.code,{children:"array"}),", ",(0,t.jsx)(n.code,{children:"string"})]})]})]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"int x = 5;\r\nint y = x;\r\ny++;\r\nConsole.WriteLine(x); // Output: 5\r\nConsole.WriteLine(y); // Output: 6\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"int[] arr1 = { 1, 2, 3 };\r\nint[] arr2 = arr1;\r\narr2[0] = 99;\r\n\r\nConsole.WriteLine(arr1[0]); // Output: 99\r\nConsole.WriteLine(arr2[0]); // Output: 99\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,t.jsx)(n.strong,{children:"Questions for students"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Which one uses shared memory?"}),"\n",(0,t.jsx)(n.li,{children:"What\u2019s the risk of modifying reference types in methods?"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,t.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create a method that changes a field inside a class and call it."}),"\n",(0,t.jsx)(n.li,{children:"Do the same with a struct and compare the result."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-clean-code-tips",children:"\ud83e\uddf9 Clean Code Tips"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use value types for small, immutable data (like coordinates, amounts)."}),"\n",(0,t.jsx)(n.li,{children:"Use reference types when identity matters or data is shared."}),"\n",(0,t.jsx)(n.li,{children:"Avoid returning references to mutable internal state."}),"\n",(0,t.jsx)(n.li,{children:"Be mindful of side effects when passing reference types to methods."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var r=s(6540);const t={},i=r.createContext(t);function c(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);