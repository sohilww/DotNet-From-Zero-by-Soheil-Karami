"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[8875],{1155:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Contents/Session 1/Classes-constructors-properties-inheritance/Constructors-and-Properties","title":"Constructors and Properties","description":"When you create an object, you often want to initialize it with values.","source":"@site/docs/Contents/Session 1/04-Classes-constructors-properties-inheritance/02-Constructors-and-Properties.md","sourceDirName":"Contents/Session 1/04-Classes-constructors-properties-inheritance","slug":"/Contents/Session 1/Classes-constructors-properties-inheritance/Constructors-and-Properties","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/Constructors-and-Properties","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/04-Classes-constructors-properties-inheritance/02-Constructors-and-Properties.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Constructors and Properties","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Classes and Objects","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/classes-and-objects"},"next":{"title":"What is OOP","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/what-is-OOP"}}');var t=s(4848),i=s(8453);const o={title:"Constructors and Properties",sidebar_position:2},l="\ud83d\udee0\ufe0f Constructors and Properties in C#",c={},d=[{value:"\ud83d\udd39 What is a Constructor?",id:"-what-is-a-constructor",level:2},{value:"\ud83d\udd10 Access Control (Access Modifiers)",id:"-access-control-access-modifiers",level:2},{value:"\ud83c\udf33 Tree Analogy",id:"-tree-analogy",level:3},{value:"\ud83e\udde0 Why Fields Should Be Private (Encapsulation)",id:"-why-fields-should-be-private-encapsulation",level:2},{value:"\ud83d\udd0d Validation Logic",id:"-validation-logic",level:2},{value:"\ud83d\udca1 OOP Design Tip",id:"-oop-design-tip",level:2},{value:"\ud83c\udfe0 Introducing Properties",id:"-introducing-properties",level:2},{value:"\u274c Why Not Use Public Fields?",id:"-why-not-use-public-fields",level:3},{value:"\u2705 Properties to the Rescue",id:"-properties-to-the-rescue",level:3},{value:"\u26a1 Auto-Implemented Properties",id:"-auto-implemented-properties",level:2},{value:"\ud83d\udd12 Read-Only Properties",id:"-read-only-properties",level:2},{value:"\u2705 Summary",id:"-summary",level:2}];function a(e){const n={blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"\ufe0f-constructors-and-properties-in-c",children:"\ud83d\udee0\ufe0f Constructors and Properties in C#"})}),"\n",(0,t.jsxs)(n.p,{children:["When you create an object, you often want to ",(0,t.jsx)(n.strong,{children:"initialize it with values"}),".",(0,t.jsx)(n.br,{}),"\n","That's where ",(0,t.jsx)(n.strong,{children:"constructors"})," and ",(0,t.jsx)(n.strong,{children:"properties"})," come in."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-what-is-a-constructor",children:"\ud83d\udd39 What is a Constructor?"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"constructor"})," is a special method that runs automatically when an object is created.",(0,t.jsx)(n.br,{}),"\n","It\u2019s often used to assign values to fields or properties."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"class Tree\r\n{\r\n    public string FruitType;\r\n    public int Height;\r\n\r\n    public Tree(string fruitType, int height)\r\n    {\r\n        FruitType = fruitType;\r\n        Height = height;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can now create a tree and set its values right when you create it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'Tree appleTree = new Tree("Apple", 2);\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,t.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"What\u2019s the benefit of using constructors instead of setting values one by one?"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,t.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,t.jsxs)(n.p,{children:["Create a class called ",(0,t.jsx)(n.code,{children:"Book"})," with fields: ",(0,t.jsx)(n.code,{children:"Title"}),", ",(0,t.jsx)(n.code,{children:"Author"}),", and ",(0,t.jsx)(n.code,{children:"Pages"}),".",(0,t.jsx)(n.br,{}),"\n","Write a constructor to set all of them when the object is created."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-access-control-access-modifiers",children:"\ud83d\udd10 Access Control (Access Modifiers)"}),"\n",(0,t.jsxs)(n.p,{children:["In C#, you can control ",(0,t.jsx)(n.strong,{children:"who can access"})," the fields and methods of a class using ",(0,t.jsx)(n.em,{children:"access modifiers"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The most common ones are:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Modifier"}),(0,t.jsx)(n.th,{children:"Who can access it?"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"public"})}),(0,t.jsx)(n.td,{children:"Anyone \u2014 from anywhere"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"private"})}),(0,t.jsx)(n.td,{children:"Only inside the same class"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"protected"})}),(0,t.jsx)(n.td,{children:"Only inside the class and its subclasses"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"-tree-analogy",children:"\ud83c\udf33 Tree Analogy"}),"\n",(0,t.jsxs)(n.p,{children:["Imagine a ",(0,t.jsx)(n.strong,{children:"tree"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\ud83c\udf4e The fruits and leaves are visible \u2014 anyone can touch them \u2192 they are like ",(0,t.jsx)(n.code,{children:"public"})," fields."]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83c\udf3f The inner ",(0,t.jsx)(n.strong,{children:"roots and trunk layers"})," are hidden and protected \u2014 like ",(0,t.jsx)(n.code,{children:"private"})," parts of a class."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You can't just cut into the trunk directly from outside \u2014 only the tree itself (internally) can grow or alter those parts."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,t.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["What about the ",(0,t.jsx)(n.strong,{children:"roots"})," of the tree?",(0,t.jsx)(n.br,{}),"\n","Should they be ",(0,t.jsx)(n.code,{children:"private"}),", or maybe ",(0,t.jsx)(n.code,{children:"protected"})," so only specialized trees can access them?"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Discuss where you'd apply each modifier in the tree class."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"class Tree\r\n{\r\n    public string FruitType;      // visible to everyone\r\n    private int RootDepth;        // only accessible inside the class\r\n    protected int BranchCount;    // accessible to subclasses too\r\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'Tree appleTree = new Tree("Apple", 2);\r\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-why-fields-should-be-private-encapsulation",children:"\ud83e\udde0 Why Fields Should Be Private (Encapsulation)"}),"\n",(0,t.jsxs)(n.p,{children:["If you expose your class\u2019s data directly to the outside world,",(0,t.jsx)(n.br,{}),"\n","you lose control over ",(0,t.jsx)(n.strong,{children:"how it\u2019s used"})," or ",(0,t.jsx)(n.strong,{children:"what values are allowed"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s say you have a tree with a public field called ",(0,t.jsx)(n.code,{children:"Height"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"class Tree\r\n{\r\n    public string FruitType;\r\n    public int Height;\r\n\r\n    public Tree(string fruitType, int height)\r\n    {\r\n        FruitType = fruitType;\r\n        Height = height;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Anyone could write:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"Tree myTree = new Tree();\r\nmyTree.Height = -10;\r\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"That doesn\u2019t make sense in real life \u2014 trees don\u2019t shrink to negative height!"}),"\n",(0,t.jsxs)(n.p,{children:["This is why we make fields ",(0,t.jsx)(n.code,{children:"private"})," and provide safe access through ",(0,t.jsx)(n.strong,{children:"properties"})," or ",(0,t.jsx)(n.strong,{children:"methods"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,t.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"What could go wrong if any part of your code can directly modify any field of any object?"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-validation-logic",children:"\ud83d\udd0d Validation Logic"}),"\n",(0,t.jsxs)(n.p,{children:["If we want to protect the field but still let others assign values,",(0,t.jsx)(n.br,{}),"\n","we could write our own ",(0,t.jsx)(n.strong,{children:"validation logic"})," in a method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'class Tree\r\n{\r\n    private int Height;\r\n\r\n    public void SetHeight(int newHeight)\r\n    {\r\n        if (newHeight > 0)\r\n        {\r\n            Height = newHeight;\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine("Invalid height. It must be positive.");\r\n        }\r\n    }\r\n}\r\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This way, we can ensure our object stays in a ",(0,t.jsx)(n.strong,{children:"valid state"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-oop-design-tip",children:"\ud83d\udca1 OOP Design Tip"}),"\n",(0,t.jsx)(n.p,{children:"Good object-oriented design means:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Keep the ",(0,t.jsx)(n.strong,{children:"data private"})]}),"\n",(0,t.jsx)(n.li,{children:"Only expose what\u2019s necessary"}),"\n",(0,t.jsxs)(n.li,{children:["Let the ",(0,t.jsx)(n.strong,{children:"class itself decide"})," what is valid or not"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Don\u2019t let the outside world mess with your tree\u2019s roots \ud83c\udf33"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,t.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Make the ",(0,t.jsx)(n.code,{children:"LeafCount"})," field of your ",(0,t.jsx)(n.code,{children:"Tree"})," class private"]}),"\n",(0,t.jsxs)(n.li,{children:["Write a method ",(0,t.jsx)(n.code,{children:"SetLeafCount(int leafCount)"})," that accepts only values greater than 0"]}),"\n",(0,t.jsx)(n.li,{children:"Try creating a tree and test with different height values (valid and invalid)"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-introducing-properties",children:"\ud83c\udfe0 Introducing Properties"}),"\n",(0,t.jsxs)(n.p,{children:["In C#, properties are a better way to ",(0,t.jsx)(n.strong,{children:"control access"})," to your class\u2019s internal state.",(0,t.jsx)(n.br,{}),"\n","They look like fields from the outside \u2014 but give you full power to add logic inside."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"-why-not-use-public-fields",children:"\u274c Why Not Use Public Fields?"}),"\n",(0,t.jsx)(n.p,{children:"Public fields let anyone assign anything, which can cause invalid states."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"class Tree\r\n{\r\n    public int Height;\r\n}\r\n\r\nTree t = new Tree();\r\nt.Height = -5; // \u274c invalid\r\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"We\u2019ve already seen how this can lead to problems."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"-properties-to-the-rescue",children:"\u2705 Properties to the Rescue"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"property"})," lets you define a ",(0,t.jsx)(n.code,{children:"get"})," and ",(0,t.jsx)(n.code,{children:"set"})," method for a private field \u2014",(0,t.jsx)(n.br,{}),"\n","but in a much cleaner and more readable way."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'class Tree\r\n{\r\n    private int _height;\r\n\r\n    public int Height\r\n    {\r\n        get { return _height; }\r\n        set\r\n        {\r\n            if (value > 0)\r\n                _height = value;\r\n            else\r\n                Console.WriteLine("Height must be positive.");\r\n        }\r\n    }\r\n}\r\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"This gives you control over how the data is accessed or modified."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,t.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Why would a ",(0,t.jsx)(n.code,{children:"set"})," method sometimes include validation, but ",(0,t.jsx)(n.code,{children:"get"})," often doesn\u2019t?"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-auto-implemented-properties",children:"\u26a1 Auto-Implemented Properties"}),"\n",(0,t.jsxs)(n.p,{children:["If you don\u2019t need custom logic, you can use ",(0,t.jsx)(n.strong,{children:"auto-properties"})," \u2014",(0,t.jsx)(n.br,{}),"\n","they create the backing field for you automatically."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Auto-properties are great for cases when you don\u2019t need custom validation"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public string FruitType { get; set; }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This is perfect for simple cases like ",(0,t.jsx)(n.code,{children:"Name"}),", ",(0,t.jsx)(n.code,{children:"Type"}),", or ",(0,t.jsx)(n.code,{children:"IsActive"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-read-only-properties",children:"\ud83d\udd12 Read-Only Properties"}),"\n",(0,t.jsxs)(n.p,{children:["Want a property to be ",(0,t.jsx)(n.strong,{children:"read-only"}),"? Just leave out the ",(0,t.jsx)(n.code,{children:"set"})," part."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public DateTime PlantedDate { get; }\r\n\r\npublic Tree()\r\n{\r\n    PlantedDate = DateTime.Now;\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can still assign the value in the constructor \u2014 but no one can change it later."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,t.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"What kinds of data should be read-only in a class?"}),"\n",(0,t.jsx)(n.li,{children:"Can you name one from real life (e.g. national ID, creation date, etc.)?"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,t.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,t.jsxs)(n.p,{children:["Update your ",(0,t.jsx)(n.code,{children:"Tree"})," class:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Change ",(0,t.jsx)(n.code,{children:"Height"})," to a ",(0,t.jsx)(n.strong,{children:"property"})," with validation logic (reject negative values)"]}),"\n",(0,t.jsxs)(n.li,{children:["Add an ",(0,t.jsx)(n.strong,{children:"auto-property"})," for ",(0,t.jsx)(n.code,{children:"FruitType"})]}),"\n",(0,t.jsxs)(n.li,{children:["Add a ",(0,t.jsx)(n.strong,{children:"read-only property"})," called ",(0,t.jsx)(n.code,{children:"PlantedDate"})," that is set in the constructor"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Then create a tree and try reading and modifying these values."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-summary",children:"\u2705 Summary"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Concept"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Constructor"}),(0,t.jsx)(n.td,{children:"Initializes objects when they\u2019re created"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Property"}),(0,t.jsx)(n.td,{children:"Exposes data with control over getting/setting"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Auto-property"}),(0,t.jsx)(n.td,{children:"Short syntax for properties with default behavior"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Read-only"}),(0,t.jsx)(n.td,{children:"Property that can\u2019t be changed externally"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);