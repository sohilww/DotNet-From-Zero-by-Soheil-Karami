"use strict";(self.webpackChunkdot_net_from_zero_by_soheil_karami=self.webpackChunkdot_net_from_zero_by_soheil_karami||[]).push([[7963],{770:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Contents/Session 1/Classes-constructors-properties-inheritance/Abstraction","title":"Abstraction","description":"Abstraction is the OOP principle of hiding complexity and exposing only essential features.","source":"@site/docs/Contents/Session 1/04-Classes-constructors-properties-inheritance/07-Abstraction.md","sourceDirName":"Contents/Session 1/04-Classes-constructors-properties-inheritance","slug":"/Contents/Session 1/Classes-constructors-properties-inheritance/Abstraction","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/Abstraction","draft":false,"unlisted":false,"editUrl":"https://github.com/sohilww/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/04-Classes-constructors-properties-inheritance/07-Abstraction.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Abstraction","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Encapsulation","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/Encapsulation"},"next":{"title":"Interfaces","permalink":"/DotNet-From-Zero-by-Soheil-Karami/docs/Contents/Session 1/Classes-constructors-properties-inheritance/Interface"}}');var t=s(4848),i=s(8453);const c={title:"Abstraction",sidebar_position:7},a="\ud83e\uddca Abstraction in C#",o={},l=[{value:"\ud83e\udde0 Real-Life Analogy",id:"-real-life-analogy",level:2},{value:"\ud83c\udf33 Tree Example",id:"-tree-example",level:2},{value:"\u2705 Abstraction in C# with <code>abstract</code> classes or <code>interface</code>",id:"-abstraction-in-c-with-abstract-classes-or-interface",level:2},{value:"\ud83d\udcd8 Abstract Class Example",id:"-abstract-class-example",level:3},{value:"\ud83d\udcd8 Interface Example",id:"-interface-example",level:3},{value:"\ud83d\udd0d Abstraction vs Encapsulation",id:"-abstraction-vs-encapsulation",level:2},{value:"\u2705 Summary",id:"-summary",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-abstraction-in-c",children:"\ud83e\uddca Abstraction in C#"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Abstraction"})," is the OOP principle of ",(0,t.jsx)(n.strong,{children:"hiding complexity"})," and ",(0,t.jsx)(n.strong,{children:"exposing only essential features"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"It helps you build cleaner, simpler, and easier-to-understand systems."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-real-life-analogy",children:"\ud83e\udde0 Real-Life Analogy"}),"\n",(0,t.jsx)(n.p,{children:"Imagine driving a car \ud83d\ude97:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You turn the steering wheel \u2192 the car turns"}),"\n",(0,t.jsx)(n.li,{children:"You push the gas pedal \u2192 the car accelerates"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You ",(0,t.jsx)(n.strong,{children:"don\u2019t need to know"})," how the engine, gearbox, or brakes work inside.",(0,t.jsx)(n.br,{}),"\n","You only interact with the ",(0,t.jsx)(n.strong,{children:"essential features"})," \u2014 this is ",(0,t.jsx)(n.strong,{children:"abstraction"})," in action."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-tree-example",children:"\ud83c\udf33 Tree Example"}),"\n",(0,t.jsx)(n.p,{children:"Let\u2019s say we have different types of trees: AppleTree, PineTree, etc."}),"\n",(0,t.jsx)(n.p,{children:"We want all trees to be able to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Grow"}),"\n",(0,t.jsx)(n.li,{children:"Photosynthesize"}),"\n",(0,t.jsx)(n.li,{children:"ProduceFruit"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["But we ",(0,t.jsx)(n.strong,{children:"don\u2019t care how"})," each tree does it.",(0,t.jsx)(n.br,{}),"\n","We just want a ",(0,t.jsx)(n.strong,{children:"common interface"})," for all trees."]}),"\n",(0,t.jsx)(n.p,{children:"\u2192 This is where abstraction helps."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"-abstraction-in-c-with-abstract-classes-or-interface",children:["\u2705 Abstraction in C# with ",(0,t.jsx)(n.code,{children:"abstract"})," classes or ",(0,t.jsx)(n.code,{children:"interface"})]}),"\n",(0,t.jsx)(n.p,{children:"You can use:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"abstract"})," classes \u2192 when you want to include ",(0,t.jsx)(n.strong,{children:"some shared logic"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"interface"})," \u2192 when you only care about defining ",(0,t.jsx)(n.strong,{children:"the contract"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"-abstract-class-example",children:"\ud83d\udcd8 Abstract Class Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public abstract class Tree\r\n{\r\n    public abstract void Grow();\r\n    public abstract void ProduceFruit();\r\n\r\n    public void Photosynthesize()\r\n    {\r\n        Console.WriteLine("Photosynthesizing... \ud83c\udf1e");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"-interface-example",children:"\ud83d\udcd8 Interface Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public interface ITree\r\n{\r\n    void Grow();\r\n    void ProduceFruit();\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-abstraction-vs-encapsulation",children:"\ud83d\udd0d Abstraction vs Encapsulation"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"Encapsulation"}),(0,t.jsx)(n.th,{children:"Abstraction"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Purpose"}),(0,t.jsx)(n.td,{children:"Hide internal data"}),(0,t.jsx)(n.td,{children:"Hide implementation complexity"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"How?"}),(0,t.jsxs)(n.td,{children:["Using ",(0,t.jsx)(n.code,{children:"private"}),", ",(0,t.jsx)(n.code,{children:"protected"}),", properties"]}),(0,t.jsxs)(n.td,{children:["Using ",(0,t.jsx)(n.code,{children:"abstract class"}),", ",(0,t.jsx)(n.code,{children:"interface"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Focus"}),(0,t.jsx)(n.td,{children:"Who can access the data"}),(0,t.jsx)(n.td,{children:"What operations are available"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Real-life role"}),(0,t.jsx)(n.td,{children:"Sealed container"}),(0,t.jsx)(n.td,{children:"Simplified control panel or remote"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe8 ",(0,t.jsx)(n.strong,{children:"Question for students"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"What are some examples of abstraction in real life?"}),"\n",(0,t.jsx)(n.li,{children:"Why do we need interfaces if abstract classes exist?"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udfe6 ",(0,t.jsx)(n.strong,{children:"Practice"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Create an ",(0,t.jsx)(n.code,{children:"IWorker"})," interface with ",(0,t.jsx)(n.code,{children:"Work()"})," and ",(0,t.jsx)(n.code,{children:"Report()"})]}),"\n",(0,t.jsxs)(n.li,{children:["Implement ",(0,t.jsx)(n.code,{children:"Engineer"})," and ",(0,t.jsx)(n.code,{children:"Designer"})," classes"]}),"\n",(0,t.jsxs)(n.li,{children:["Call the methods through an ",(0,t.jsx)(n.code,{children:"IWorker"})," reference"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-summary",children:"\u2705 Summary"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Concept"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Abstraction"}),(0,t.jsxs)(n.td,{children:["Expose ",(0,t.jsx)(n.strong,{children:"what"})," an object does, not ",(0,t.jsx)(n.strong,{children:"how"})," it does it"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Interface"}),(0,t.jsx)(n.td,{children:"Defines a contract (no implementation)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Abstract Class"}),(0,t.jsx)(n.td,{children:"Can define a contract + shared logic"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var r=s(6540);const t={},i=r.createContext(t);function c(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);